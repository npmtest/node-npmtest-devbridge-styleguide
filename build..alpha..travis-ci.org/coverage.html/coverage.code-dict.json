{"/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/test.js":"/* istanbul instrument in package npmtest_devbridge_styleguide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/lib.npmtest_devbridge_styleguide.js":"/* istanbul instrument in package npmtest_devbridge_styleguide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_devbridge_styleguide = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_devbridge_styleguide = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-devbridge-styleguide && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_devbridge_styleguide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_devbridge_styleguide\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_devbridge_styleguide.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_devbridge_styleguide.rollup.js'] =\n            local.assetsDict['/assets.npmtest_devbridge_styleguide.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_devbridge_styleguide.__dirname + '/lib.npmtest_devbridge_styleguide.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/index.js":"var _ = require('lodash');\nvar app = require('./app');\nvar http = require('http');\nvar fs = require('fs');\nvar exports = module.exports = {};\nvar tcpPortUsed = require('tcp-port-used');\nvar colors = require('colors/safe');\n\nexports.startServer = function (options) {\n\tvar defaultOptions = {\n\t\tstyleguidePath: 'styleguide'\n\t};\n\n\toptions = _.assign(defaultOptions, options);\n\n\tvar config = JSON.parse(fs.readFileSync('./' + options.styleguidePath + '/config.txt', 'utf8'));\n\tvar serverInstance;\n\n\treturn tcpPortUsed.check(config.serverPort)\n\t\t.then(function (inUse) {\n\t\t\tif (!inUse) {\n\t\t\t\tapp.set('styleguideConfig', config);\n\t\t\t\tapp.set('port', config.serverPort);\n\t\t\t\tserverInstance = http.createServer(app);\n\t\t\t\tserverInstance.listen(config.serverPort, function () {\n\t\t\t\t\tconsole.log(colors.green('Styleguide server listening on port ' + config.serverPort));\n\t\t\t\t}).on('error', function (error) {\n\t\t\t\t\tif (error.code === 'EADDRINUSE') {\n\t\t\t\t\t\tconsole.error(colors.red('Something went wrong and server could not start'));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.error(colors.red('Port:' + config.serverPort + ' is already in use.'));\n\t\t\t\tconsole.error(colors.red('Please provide another port.'));\n\t\t\t}\n\n\t\t\treturn serverInstance;\n\n\t\t});\n};\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/app.js":"var express = require('express'),\n  bodyParser = require('body-parser'),\n\n  snippets = require('./routes/snippets'),\n  categories = require('./routes/categories'),\n  scraper = require('./routes/scrape'),\n\n  app = express();\n\n//var logger = require('morgan');\n\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n\n//app.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\n\napp.use(function(req, res, next) {\n  if (req.headers.origin) {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Headers', 'X-Requested-With,Content-Type,Authorization');\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,PATCH,POST,DELETE');\n    if (req.method === 'OPTIONS') return res.sendStatus(200);\n  }\n  next();\n});\n\napp.use('/snippets', snippets);\napp.use('/categories', categories);\napp.use('/scrape', scraper);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n  app.use(function(err, req, res) {\n    res.status(err.status || 500);\n    res.json({\n      message: err.message,\n      error: err\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function(err, req, res) {\n  res.status(err.status || 500);\n  res.json({\n    message: err.message,\n    error: {}\n  });\n});\n\n\nmodule.exports = app;\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/snippets.js":"var express = require('express'),\r\n  fs = require('fs'),\r\n  path = require('path'),\r\n  jf = require('jsonfile'),\r\n  helpers = require('./helpers.js'),\r\n  router = express.Router();\r\n\r\nrouter.get('/', function(req, res) {\r\n  var allSnippets = [],\r\n    config = req.app.get('styleguideConfig'),\r\n    snippets,\r\n    dataPath,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length;\r\n\r\n  for (index = 0; index < length; index++) {\r\n    dataPath = path.join(config.database, categories[index].name + config.extension);\r\n\r\n    snippets = jf.readFileSync(dataPath);\r\n    snippets = snippets.map(helpers.mapCategory, index);\r\n    snippets = snippets.filter(helpers.filterOutDeleted);\r\n    allSnippets = allSnippets.concat(snippets);\r\n  }\r\n  res.json(allSnippets);\r\n});\r\n\r\nrouter.get('/duplicates', function(req, res) {\r\n  var allSnippets = [],\r\n    config = req.app.get('styleguideConfig'),\r\n    found = false,\r\n    dataPath,\r\n    snippets,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length;\r\n\r\n  for (index = 0; index < length; index++) {\r\n    dataPath = path.join(config.database, categories[index].name + config.extension);\r\n\r\n    snippets = jf.readFileSync(dataPath);\r\n    snippets = snippets.map(helpers.mapCategory, index);\r\n    snippets = snippets.filter(helpers.filterOutDeleted);\r\n    allSnippets = allSnippets.concat(snippets);\r\n  }\r\n\r\n  allSnippets.sort(helpers.duplicateComparator);\r\n\r\n  for (index = 0, length = allSnippets.length - 1; index < length; index++) {\r\n    if (allSnippets[index].id == allSnippets[index + 1].id) {\r\n      res.json([allSnippets[index], allSnippets[index + 1]]);\r\n      found = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!found) {\r\n    res.json(found);\r\n  }\r\n});\r\n\r\nrouter.get('/category/:id', function(req, res) {\r\n  var catId = Number(req.params.id),\r\n    config = req.app.get('styleguideConfig'),\r\n    dataPath,\r\n    snippets,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length;\r\n\r\n  for (index = 0; index < length; index++) {\r\n    if (categories[index].id == catId) {\r\n      dataPath = path.join(config.database, categories[index].name + config.extension);\r\n    }\r\n  }\r\n\r\n  if (!dataPath) {\r\n    res.json('Category with id: ' + catId + 'not found.');\r\n    return;\r\n  }\r\n\r\n  snippets = jf.readFileSync(dataPath);\r\n  snippets = snippets.filter(helpers.filterOutDeleted);\r\n\r\n  res.json(snippets);\r\n});\r\n\r\n\r\nrouter.get('/:id', function(req, res) {\r\n  var config = req.app.get('styleguideConfig'),\r\n    uniques = jf.readFileSync(config.uniques),\r\n    id = Number(req.params.id),\r\n    snippets,\r\n    dataPath,\r\n    desireableSnippet,\r\n    categories = JSON.parse(fs.readFileSync(config.categories));\r\n\r\n  if (uniques.indexOf(id) === -1) {\r\n    res.json(false);\r\n    return;\r\n  }\r\n\r\n  for (var i = 0, length = categories.length; i < length; i++) {\r\n    dataPath = path.join(config.database, categories[i].name + config.extension);\r\n    snippets = jf.readFileSync(dataPath);\r\n\r\n    desireableSnippet = snippets.filter(helpers.filterOutById, id)[0];\r\n\r\n    if (desireableSnippet) {\r\n      desireableSnippet.category = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  res.json(desireableSnippet);\r\n});\r\n\r\n\r\nrouter.post('/', function(req, res) {\r\n  var config = req.app.get('styleguideConfig'),\r\n    uniques = jf.readFileSync(config.uniques),\r\n    dataPath,\r\n    dataStore,\r\n    id,\r\n    newSnippet,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length;\r\n\r\n  for (index = 0; index < length; index++) {\r\n    if (categories[index].id === Number(req.body.category)) {\r\n      dataPath = path.join(config.database, categories[index].name + config.extension);\r\n    }\r\n  }\r\n\r\n  if (!dataPath) {\r\n    res.json('Category with id: ' + req.body.category + ' not found.');\r\n    return;\r\n  }\r\n\r\n  dataStore = jf.readFileSync(dataPath);\r\n\r\n  function sortNumber(a, b) {\r\n    return a - b;\r\n  }\r\n\r\n  uniques.sort(sortNumber);\r\n\r\n  if (uniques.length) {\r\n    id = uniques[uniques.length - 1] + 1;\r\n  } else {\r\n    id = 1;\r\n  }\r\n\r\n  newSnippet = {\r\n    id: id,\r\n    name: req.body.name,\r\n    code: req.body.code,\r\n    description: req.body.description,\r\n    inlineCss: req.body.inlineCss,\r\n    includeJs: req.body.includeJs,\r\n    isEdited: false,\r\n    isDeleted: false\r\n  };\r\n\r\n  dataStore.push(newSnippet);\r\n  uniques.push(id);\r\n\r\n  jf.writeFileSync(dataPath, dataStore);\r\n  jf.writeFileSync(config.uniques, uniques);\r\n\r\n  newSnippet.category = Number(req.body.category);\r\n  res.json(newSnippet);\r\n});\r\n\r\n\r\nrouter.put('/:id', function(req, res) {\r\n  var config = req.app.get('styleguideConfig'),\r\n    uniques = jf.readFileSync(config.uniques),\r\n    id = Number(req.params.id),\r\n    snippets,\r\n    category,\r\n    dataPath,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length,\r\n    newCategory = Number(req.body.category),\r\n    desireableSnippet,\r\n    modifiedSnippet;\r\n\r\n  if (uniques.indexOf(id) === -1) {\r\n    res.json(false);\r\n    return;\r\n  }\r\n\r\n  for (index = 0; index < length; index++) {\r\n    dataPath = path.join(config.database, categories[index].name + config.extension);\r\n    snippets = jf.readFileSync(dataPath);\r\n\r\n    desireableSnippet = snippets.filter(helpers.filterOutById, id)[0];\r\n\r\n    if (desireableSnippet) {\r\n      category = index;\r\n      break;\r\n    }\r\n  }\r\n\r\n  index = snippets.indexOf(desireableSnippet);\r\n  snippets.splice(index, 1);\r\n\r\n  if (newCategory !== Number(category)) {\r\n    jf.writeFileSync(dataPath, snippets);\r\n\r\n    for (index = 0; index < length; index++) {\r\n      if (categories[index].id == newCategory) {\r\n        dataPath = path.join(config.database, categories[index].name + config.extension);\r\n      }\r\n    }\r\n\r\n    if (!dataPath) {\r\n      res.json('Category with id: ' + newCategory + 'not found.');\r\n      return;\r\n    }\r\n\r\n    snippets = jf.readFileSync(dataPath);\r\n  }\r\n\r\n  modifiedSnippet = {\r\n    id: id,\r\n    name: req.body.name,\r\n    code: req.body.code,\r\n    description: req.body.description,\r\n    inlineCss: req.body.inlineCss,\r\n    includeJs: req.body.includeJs,\r\n    isEdited: true,\r\n    isDeleted: false\r\n  };\r\n\r\n  snippets.push(modifiedSnippet);\r\n  jf.writeFileSync(dataPath, snippets);\r\n\r\n  modifiedSnippet.category = newCategory;\r\n  res.json(modifiedSnippet);\r\n});\r\n\r\n\r\nrouter.delete('/:id', function(req, res) {\r\n  var config = req.app.get('styleguideConfig'),\r\n    uniques = jf.readFileSync(config.uniques),\r\n    id = Number(req.params.id),\r\n    snippets,\r\n    category,\r\n    dataPath,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length,\r\n    desireableSnippet;\r\n\r\n  if (uniques.indexOf(id) === -1) {\r\n    res.json(false);\r\n    return;\r\n  }\r\n\r\n  for (index = 0; index < length; index++) {\r\n    dataPath = path.join(config.database, categories[index].name + config.extension);\r\n    snippets = jf.readFileSync(dataPath);\r\n\r\n    desireableSnippet = snippets.filter(helpers.filterOutById, id)[0];\r\n\r\n    if (desireableSnippet) {\r\n      category = index;\r\n      break;\r\n    }\r\n  }\r\n\r\n  desireableSnippet.isDeleted = true;\r\n  desireableSnippet.isEdited = true;\r\n\r\n  index = snippets.indexOf(desireableSnippet);\r\n  snippets.splice(index, 1, desireableSnippet);\r\n\r\n  jf.writeFileSync(dataPath, snippets);\r\n  res.json(desireableSnippet);\r\n});\r\n\r\nmodule.exports = router;","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/helpers.js":"var exports = module.exports = {};\r\n\r\nvar isNumeric = function(num) {\r\n\treturn !isNaN(num);\r\n};\r\n\r\nexports.mapCategory = function(obj) {\r\n\tobj.category = this;\r\n\treturn obj;\r\n};\r\n\r\nexports.filterOutDeleted = function(obj) {\r\n\treturn !obj.isDeleted;\r\n};\r\n\r\nexports.duplicateComparator = function(a, b) {\r\n\treturn a.id - b.id;\r\n};\r\n\r\nexports.filterOutById = function(obj) {\r\n\tif (obj.id == this) {\r\n\t\treturn obj;\r\n\t}\r\n};\r\n\r\nexports.convertToWeightObject = function(obj) {\r\n\tif (isNumeric(obj)) {\r\n\t\treturn {\r\n\t\t\tweight: Number(obj),\r\n\t\t\titalic: false\r\n\t\t};\r\n\t}\r\n\r\n\treturn {\r\n\t\tweight: parseInt(obj),\r\n\t\titalic: true\r\n\t};\r\n};\r\n\r\nexports.filterOutNotVars = function(obj) {\r\n\treturn obj.search(/(?=\\$)[\\d\\D]/) === 0;\r\n};","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/categories.js":"var _ = require('lodash'),\n\texpress = require('express'),\n\tfs = require('fs'),\n\tpath = require('path'),\n\tjf = require('jsonfile'),\n\trouter = express.Router();\n\nrouter.get('/', function(req, res) {\n\tvar config = req.app.get('styleguideConfig'),\n\t\tcategories = JSON.parse(fs.readFileSync(config.categories, 'utf8'));\n\n\tres.json(categories);\n});\n\nrouter.post('/', function (req, res) {\n\tvar config = req.app.get('styleguideConfig'),\n\t\tcategories = JSON.parse(fs.readFileSync(config.categories, 'utf8')),\n\t\tuniqueIds = _.map(categories, 'id'),\n\t\tnewCategory = {},\n\t\tid = 1;\n\n\tuniqueIds.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\tif (uniqueIds.length) {\n\t\tid = uniqueIds[uniqueIds.length - 1 ] + 1;\n\t}\n\n\tnewCategory = {\n\t\tid: id,\n\t\tname: req.body.name\n\t};\n\n    _checkForDupes(categories, newCategory);\n\n\tcategories.push(newCategory);\n\n\tjf.writeFileSync(config.categories, categories);\n\tjf.writeFileSync(path.join(config.database, newCategory.name + config.extension), []);\n\n\tres.json(newCategory);\n});\n\nrouter.put('/:id', function(req, res) {\n\tvar config = req.app.get('styleguideConfig'),\n\t\tcategories = JSON.parse(fs.readFileSync(config.categories, 'utf8')),\n\t\tuniqueIds = _.map(categories, 'id'),\n\t\tid = Number(req.params.id),\n\t\tcategoryIndex = uniqueIds.indexOf(id),\n\t\tcategory = categories[categoryIndex],\n\t\tmodifiedCategory,\n\t\toldCategoryPath = path.join(config.database, category.name + config.extension),\n\t\tnewCategoryPath;\n\n\tif (categoryIndex === -1) {\n\t\tres.json(false);\n\t\treturn;\n\t}\n\n\tmodifiedCategory = {\n\t\tid: id,\n\t\tname: req.body.name\n\t};\n\n    _checkForDupes(categories, modifiedCategory);\n\n\tnewCategoryPath = path.join(config.database, modifiedCategory.name + config.extension);\n\n\tcategories.splice(categoryIndex, 1, modifiedCategory);\n\tjf.writeFileSync(config.categories, categories);\n\n\tfs.renameSync(oldCategoryPath, newCategoryPath);\n\n\tres.json(modifiedCategory);\n});\n\nrouter.delete('/:id', function(req, res) {\n\tvar config = req.app.get('styleguideConfig'),\n\t\tcategories = JSON.parse(fs.readFileSync(config.categories, 'utf8')),\n\t\tuniqueIds = _.map(categories, 'id'),\n\t\tid = Number(req.params.id)\n\t\tcategoryIndex = uniqueIds.indexOf(id),\n\t\tcategory = categories[categoryIndex];\n\n\tif (categoryIndex === -1) {\n\t\tres.json(false);\n\t\treturn;\n\t}\n\n    var categoryToDeletePath = path.join(config.database, category.name + config.extension);\n\n    fs.unlinkSync(categoryToDeletePath);\n\n\tcategories.splice(categoryIndex, 1);\n\n\tjf.writeFileSync(config.categories, categories);\n\tres.json(category);\n});\n\nfunction _checkForDupes(categories, category) {\n    var nameLower = _.toLower(category.name);\n\n    var containsDupe = _.some(categories, function (cat) { return _.toLower(cat.name) === nameLower});\n\n    if (containsDupe) {\n        throw new Error('Category with same name already exists!');\n    }\n};\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/scrape.js":"var express = require('express'),\n  jf = require('jsonfile'),\n  fs = require('fs'),\n  async = require('async'),\n  sassScraper = require('./sassScraper.js'),\n  snippetScraper = require('./snippetScraper.js'),\n  _ = require('lodash'),\n\n  router = express.Router();\n\nrouter.get('/snippets', function(req, res) {\n  var config = req.app.get('styleguideConfig');\n\n  var pushAsyncTask = function(snippets, category, uniques, config) {\n    return function(callback) {\n      snippetScraper.writeOutSnippets(snippets, category, uniques, function(changedSnipps, newSnipps) {\n        callback(null, {\n          changedSnipps: changedSnipps,\n          newSnipps: newSnipps\n        });\n      });\n    };\n  };\n\n  snippetScraper.requestPages(config.scrapeUrls, function(responses) {\n    var filteredHTml = [],\n      filters,\n      htmlBody,\n      snippets = {},\n      newSnippet,\n      category,\n      url,\n      response,\n      index,\n      allSnippets = [],\n      length,\n      asyncTasks = [],\n      report = {},\n      uniques = jf.readFileSync(config.uniques, {\n        throws: false\n      }) || [];\n\n    for (url in responses) {\n      if (responses.hasOwnProperty(url)) {\n        response = responses[url];\n\n        if (response.error) {\n          console.log(\"Error\", url, response.error);\n          return;\n        }\n\n        if (response.body) {\n          htmlBody = response.body;\n          // matches all the snippet body (<!-- snippet:start 1:1 include-js --><div id=\"example\"></div><!-- snippet:end -->)\n          filters = htmlBody.match(/<!-- snippet:start [\\d\\D]*?snippet:end -->/gi);\n          filteredHTml = filteredHTml.concat(filters);\n        }\n      }\n    }\n\n    report.totalFound = filteredHTml.length;\n    report.changedSnippets = [];\n    report.duplicateIds = [];\n    report.foundNew = 0;\n\n    for (index = 0, length = filteredHTml.length; index < length; index++) {\n      if (filteredHTml[index]) {\n        newSnippet = snippetScraper.buildSnippetFromHtml(filteredHTml[index], snippets);\n\n        allSnippets.push(newSnippet.id);\n\n        if (!newSnippet) {\n          res.status(500).send('Something went wrong when building snippet from HTML!');\n          return;\n        }\n      }\n    }\n\n    allSnippets.sort();\n\n    for (index = 0, length = allSnippets.length; index < length; index++) {\n      if (allSnippets[index + 1] === allSnippets[index]) {\n        report.duplicateIds.push(allSnippets[index]);\n      }\n    }\n\n    for (category in snippets) {\n      if (snippets.hasOwnProperty(category)) {\n        asyncTasks.push(pushAsyncTask(snippets, category, uniques, config));\n      }\n    }\n\n    async.series(asyncTasks, function(err, reports) {\n      var index,\n        len = reports.length;\n\n      for (index = 0; index < len; index++) {\n        report.changedSnippets = report.changedSnippets.concat(reports[index].changedSnipps);\n        report.foundNew += reports[index].newSnipps;\n      }\n\n      jf.writeFileSync(config.uniques, uniques);\n\n      res.json(report);\n    });\n  });\n\n});\n\nrouter.get('/sass', function(req, res) {\n  var config = req.app.get('styleguideConfig');\n\n  var results = [],\n    result = {\n      name: 'theme',\n      colors: {},\n      typography: []\n    },\n    index,\n    sassPaths = config.cssVariables,\n    maxSassIterations = config.maxSassIterations,\n    length = sassPaths.length,\n    report = [],\n    currentResult;\n\n  for (index = 0; index < length; index++) {\n    report.push(sassScraper.scrapeTheme(index, results, sassPaths, maxSassIterations, config));\n  }\n\n  for (index = 0; index < length; index++) {\n    currentResult = results[index];\n\n    if (currentResult.colors) {\n      result.colors = _.assign(result.colors, currentResult.colors);\n    }\n\n    if (currentResult.typography) {\n      result.typography = result.typography.concat(currentResult.typography);\n    }\n\n  }\n\n  jf.writeFileSync(config.sassData, [result]);\n\n  res.json(report);\n});\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/sassScraper.js":"var helpers = require('./helpers.js'),\n  fs = require('fs'),\n  jf = require('jsonfile'),\n  path = require('path'),\n  exports = module.exports = {};\n\nvar pruneArrayAndObject = function () {\n  delete Array.prototype.equals;\n  delete Object.prototype.equals;\n};\n\nvar extendArrayAndObject = function() {\n  Array.prototype.equals = function(array) {\n    if (!array)\n      return false;\n\n    if (this.length !== array.length)\n      return false;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (this[i] instanceof Array && array[i] instanceof Array) {\n        if (!this[i].equals(array[i]))\n          return false;\n      } else if (this[i] instanceof Object && array[i] instanceof Object) {\n        if (!this[i].equals(array[i]))\n          return false;\n      } else if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  Object.prototype.equals = function(object2) {\n    var propName;\n    for (propName in this) {\n      if (this.hasOwnProperty(propName) !== object2.hasOwnProperty(propName)) {\n        return false;\n      } else if (typeof this[propName] !== typeof object2[propName]) {\n        return false;\n      }\n    }\n\n    for (propName in object2) {\n      if (this.hasOwnProperty(propName) !== object2.hasOwnProperty(propName)) {\n        return false;\n      } else if (typeof this[propName] !== typeof object2[propName]) {\n        return false;\n      }\n\n      if (!this.hasOwnProperty(propName))\n        continue;\n\n      if (this[propName] instanceof Array && object2[propName] instanceof Array) {\n        if (!this[propName].equals(object2[propName]))\n          return false;\n      } else if (this[propName] instanceof Object && object2[propName] instanceof Object) {\n        if (!this[propName].equals(object2[propName]))\n          return false;\n      } else if (this[propName] !== object2[propName]) {\n        return false;\n      }\n    }\n    return true;\n  };\n};\n\nvar parseTypoghraphy = function(theme, variables, cssType) {\n  var weights,\n    typography,\n    type,\n    rawTypoArray,\n    fontValue,\n    variableName,\n    index,\n    length;\n\n  //replace less variable declaration symbol @ to scss symbol $\n  variables = variables.replace(/\\n@/gi, '\\n$');\n  //matches everything between //-- typo:start --// and //-- typo:end --/ including these markers\n  typography = variables.match(/\\/\\/-- typo:start[\\d\\D]*?typo:end --\\/\\//gi);\n  rawTypoArray = typography[0].split('\\n');\n\n  //removing markers\n  rawTypoArray.shift();\n  rawTypoArray.pop();\n\n  rawTypoArray = rawTypoArray.filter(helpers.filterOutNotVars);\n\n  //Constructing types array\n  typography = [];\n\n  //prepare array structure https://regex101.com/\n  for (index = 0, length = rawTypoArray.length; index < length; index++) {\n    if (cssType === 'scss' || cssType === 'less') {\n      //matches from $ to :, including $. To take variable name.\n      variableName = rawTypoArray[index].match(/\\$[\\d\\D]*?(?=:)/gi)[0];\n      //matches from : to ;, including :. To take variable value.\n      fontValue = rawTypoArray[index].match(/(?=:)[\\d\\D]*?(?=;)/)[0];\n    }\n\n    if (cssType === 'styl') {\n      //matches from $ to =, including $. To take variable name.\n      variableName = rawTypoArray[index].match(/\\$[\\d\\D]*?(?==)/gi)[0];\n      //matches from = to /, including =. To take variable value.\n      fontValue = rawTypoArray[index].match(/(?==)[\\d\\D]*?(?=\\/)/)[0];\n    }\n\n    if (cssType === 'sass') {\n      //matches from $ to :, including $. To take variable name.\n      variableName = rawTypoArray[index].match(/\\$[\\d\\D]*?(?=:)/gi)[0];\n      //matches from : to end of line, including :. To take variable value.\n      fontValue = rawTypoArray[index].match(/(?=:)[\\d\\D]*?(?=\\/)/)[0];\n    }\n\n    //matches everything in between (), including (. To take font weights.\n    weights = rawTypoArray[index].match(/(?=\\/)[\\d\\D]+/gi);\n\n    fontValue = fontValue.substring(1, fontValue.length).trim();\n\n    if (weights) {\n      weights = weights[0];\n      weights = weights.replace(/\\//g, '').replace(/ /g, '').split(',');\n      weights = weights.map(helpers.convertToWeightObject);\n    } else {\n      console.log('Weights were not found for ' + variableName + '.');\n    }\n\n    type = {\n      variable: variableName,\n      value: fontValue,\n      weights: weights\n    };\n\n    typography.push(type);\n  }\n\n  theme.typography = typography;\n};\n\nvar parseColors = function(theme, variables, cssType, maxSassIterations) {\n  var rawColArray,\n    unassignedColors = [],\n    assignedColors = {},\n    iterations = 0,\n    index,\n    length,\n    variableName,\n    hexOrVarValue,\n    color;\n\n  //replace less variable declaration symbol @ to scss symbol $\n  variables = variables.replace(/\\n@/gi, '\\n$');\n  //matches everything between //-- colors:start --// and //-- colors:end --/ including these markers\n  rawColArray = variables.match(/\\/\\/-- colors:start[\\d\\D]*?colors:end --\\/\\//gi);\n\n  for (index = 0, length = rawColArray.length; index < length; index++) {\n    rawColArray[index] = rawColArray[index].split('\\n');\n\n    //remove dom markers\n    rawColArray[index].shift();\n    rawColArray[index].pop();\n\n    unassignedColors = unassignedColors.concat(rawColArray[index]);\n  }\n\n  unassignedColors = unassignedColors.filter(helpers.filterOutNotVars);\n\n  //prepare array structure https://regex101.com/\n  for (index = 0, length = unassignedColors.length; index < length; index++) {\n    if(cssType === 'less' || cssType === 'scss') {\n      //matches from $ to :, including $. To take variable name.\n      variableName = unassignedColors[index].match(/\\$[\\d\\D]*?(?=:)/gi)[0];\n      //matches from : to ;, including :. To take variable value.\n      hexOrVarValue = unassignedColors[index].match(/:[\\d\\D]*?(?=;)/gi)[0];\n    }\n\n    if (cssType === 'styl') {\n      //matches from $ to =, including $. To take variable name.\n      variableName = unassignedColors[index].match(/\\$[\\d\\D]*?(?==)/gi)[0];\n      //matches from = to end of line, including :. To take variable value.\n      hexOrVarValue = unassignedColors[index].match(/=[\\d\\D]+/gi)[0];\n    }\n\n    if (cssType === 'sass') {\n      //matches from $ to :, including $. To take variable name.\n      variableName = unassignedColors[index].match(/\\$[\\d\\D]*?(?=:)/gi)[0];\n      //matches from : to end of line, including :. To take variable value.\n      hexOrVarValue = unassignedColors[index].match(/:[\\d\\D]+/gi)[0];\n    }\n\n    hexOrVarValue = hexOrVarValue.substring(1, hexOrVarValue.length).trim();\n\n    unassignedColors[index] = {\n      variable: variableName,\n      value: hexOrVarValue\n    };\n  }\n\n  while (iterations < maxSassIterations && unassignedColors.length) {\n    for (index = 0; index < unassignedColors.length; index++) {\n      if (unassignedColors[index].value.indexOf('$') !== 0) {\n        if (assignedColors[unassignedColors[index].value]) {\n          assignedColors[unassignedColors[index].value].push(unassignedColors[index].variable);\n        } else {\n          assignedColors[unassignedColors[index].value] = [unassignedColors[index].variable];\n        }\n\n        unassignedColors.splice(index, 1);\n      } else {\n        for (color in assignedColors) {\n          if (assignedColors[color].indexOf(unassignedColors[index].value) !== -1) {\n            assignedColors[color].push(unassignedColors[index].variable);\n            unassignedColors.splice(index, 1);\n            break;\n          }\n        }\n      }\n    }\n    iterations++;\n  }\n\n  if (iterations === maxSassIterations) {\n    console.log('Iterations reached max size, your variables json file could be inaccurate!\\nThis means, that variable r-value is trying to show to non existing variable!');\n  }\n\n  theme.colors = assignedColors;\n};\n\nvar compareForReport = function(theme, report, config) {\n  var oldData = jf.readFileSync(config.sassData, {throws: false}) || [],\n    len = oldData.length,\n    index;\n\n  for (index = 0; index < len; index++) {\n    if (oldData[index].name === theme.name) {\n      oldData = oldData[index];\n      break;\n    }\n  }\n\n  if (!oldData.hasOwnProperty('colors')) {\n    oldData = {\n      colors: {},\n      typography: []\n    };\n  }\n\n  report.themeName = theme.name;\n  report.uniqueColVals = theme.colors ? Object.keys(theme.colors).length : 0;\n  report.diffOfColVals = report.uniqueColVals - Object.keys(oldData.colors).length;\n\n  if (theme.typography && !theme.typography.equals(oldData.typography)) {\n    report.oldTypo = oldData.typography;\n    report.newTypo = theme.typography;\n  }\n};\n\nexports.scrapeTheme = function(themeIndex, result, sassPaths, maxSassIterations, config) {\n  var variables,\n    theme = {},\n    report = {},\n    fileType = path.extname(sassPaths[0]),\n    cssType = fileType.substr(1, fileType.length - 1);\n\n    variables = fs.readFileSync(sassPaths[themeIndex], {\n    encoding: 'utf-8'\n  });\n  theme.name = sassPaths[themeIndex];\n\n  //matches everything between //-- typo:start --// and //-- typo:end --/ including these markers\n  if (variables.search(/\\/\\/-- typo:start[\\d\\D]*?typo:end --\\/\\//gi) !== -1) {\n    parseTypoghraphy(theme, variables, cssType);\n  } else {\n    console.log('Typography markers not found in ' + theme.name + '.');\n  }\n\n  //matches everything between //-- colors:start --// and //-- colors:end --/ including these markers\n  if (variables.search(/\\/\\/-- colors:start[\\d\\D]*?colors:end --\\/\\//gi) !== -1) {\n    parseColors(theme, variables, cssType, maxSassIterations);\n  } else {\n    console.log('Color markers not found in ' + theme.name + '.');\n  }\n\n  extendArrayAndObject();\n\n  compareForReport(theme, report, config);\n\n  pruneArrayAndObject();\n\n  result.push(theme);\n\n  return report;\n};\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/snippetScraper.js":"var request = require('request'),\r\n  path = require('path'),\r\n  jf = require('jsonfile'),\r\n  async = require('async'),\r\n  helpers = require('./helpers.js'),\r\n  fs = require('fs'),\r\n\r\n  exports = module.exports = {};\r\n\r\nvar findSnippet = function(snippetId, callback, config) {\r\n  var dataPath,\r\n    snippets,\r\n    desireableSnippet,\r\n    index,\r\n    length = config.categories.length;\r\n  for (index = 0; index < length; index++) {\r\n    dataPath = path.join(config.database, config.categories[index].name + config.extension);\r\n    snippets = jf.readFileSync(dataPath, {\r\n      throws: false\r\n    }) || [];\r\n    desireableSnippet = snippets.filter(helpers.filterOutById, snippetId)[0];\r\n    if (desireableSnippet) {\r\n      callback({\r\n        snippet: desireableSnippet,\r\n        category: index\r\n      });\r\n      break;\r\n    }\r\n  }\r\n};\r\n\r\nexports.requestPages = function(urls, callback) {\r\n  var results = {},\r\n    t = urls.length,\r\n    c = 0,\r\n    handler = function(error, response, body) {\r\n      var url = response.request.uri.href;\r\n      results[url] = {\r\n        error: error,\r\n        response: response,\r\n        body: body\r\n      };\r\n      if (++c === urls.length) {\r\n        callback(results);\r\n      }\r\n    };\r\n\r\n  while (t--) {\r\n    request(urls[t], handler);\r\n  }\r\n};\r\n\r\nexports.buildSnippetFromHtml = function(filteredHTml, snippets) {\r\n  //matches <!-- snippet:start 5:6 --> in string. only to take dom marker.\r\n  var domMarker = filteredHTml.match(/<!-- snippet:start [\\d\\D]*? -->/gi)[0],\r\n    //matches if there is include-js in domMarker\r\n    includeJs = domMarker.match(/include-js/i),\r\n    //matches all numbers, that are in domMarker (first will be snippet id, second if exists - category id)\r\n    extractedIds = domMarker.match(/[\\d]+/g),\r\n    //matches from first > to <!, including >. Used to trim off dom markers from html.\r\n    code = filteredHTml.match(/(?=>)[\\d\\D]*?(?=<!)/gi)[0],\r\n    snippetId,\r\n    categoryId,\r\n    newSnippet;\r\n\r\n  code = code.slice(1);\r\n  if (extractedIds) {\r\n    snippetId = Number(extractedIds[0]);\r\n    categoryId = extractedIds[1] ? Number(extractedIds[1]) : 0;\r\n  }\r\n\r\n  if (!snippetId) {\r\n    console.log('Snippet ID is not defined! In: ' + filteredHTml);\r\n    return false;\r\n  }\r\n\r\n  newSnippet = {\r\n    id: snippetId,\r\n    name: '',\r\n    code: code.trim(),\r\n    description: '',\r\n    inlineCss: '#snippet { \\n  \\n}',\r\n    includeJs: includeJs ? true : false,\r\n    isEdited: false,\r\n    isDeleted: false\r\n  };\r\n\r\n  snippets[categoryId] = snippets[categoryId] ? snippets[categoryId].concat(newSnippet) : [newSnippet];\r\n  return newSnippet;\r\n};\r\n\r\nexports.writeOutSnippets = function(snippets, category, uniques, callback, config) {\r\n  var dataPath,\r\n    snippet,\r\n    dataStore,\r\n    index,\r\n    nestedIndex,\r\n    nestedLen,\r\n    oldCategoryPath,\r\n    oldCatSnippets,\r\n    foundSnippetCallback,\r\n    asyncTasks = [],\r\n    changedSnippets = [],\r\n    newSnippsFound = 0,\r\n    length = config.categories.length;\r\n\r\n  for (index = 0; index < length; index++) {\r\n    if (config.categories[index].id === Number(category)) {\r\n      dataPath = path.join(config.database, config.categories[index].name + config.extension);\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!dataPath) {\r\n    console.log('Category with id: ' + category + ' not found.');\r\n    return false;\r\n  }\r\n\r\n  dataStore = jf.readFileSync(dataPath, {\r\n    throws: false\r\n  }) || [];\r\n\r\n  snippet = snippets[category];\r\n\r\n  foundSnippetCallback = function(snippetAndCategory, changedSnippets, snippetToWriteOut, cb) {\r\n    if (!snippetAndCategory.snippet.isEdited) {\r\n      if (snippetAndCategory.category == category) {\r\n        for (nestedIndex = 0, nestedLen = dataStore.length; nestedIndex < nestedLen; nestedIndex++) {\r\n          if (dataStore[nestedIndex].id == snippetAndCategory.snippet.id) {\r\n            break;\r\n          }\r\n        }\r\n        dataStore.splice(nestedIndex, 1);\r\n        dataStore.push(snippetToWriteOut);\r\n        if (snippetAndCategory.snippet.code.localeCompare(snippetToWriteOut.code) !== 0) {\r\n          changedSnippets.push(snippetToWriteOut.id);\r\n        }\r\n      } else {\r\n        for (nestedIndex = 0, nestedLen = config.categories.length; nestedIndex < nestedLen; nestedIndex++) {\r\n          if (config.categories[nestedIndex].id == snippetAndCategory.category) {\r\n            oldCategoryPath = path.join(config.database, config.categories[nestedIndex].name + config.extension);\r\n            break;\r\n          }\r\n        }\r\n\r\n        oldCatSnippets = jf.readFileSync(oldCategoryPath, {\r\n          throws: false\r\n        }) || [];\r\n\r\n        for (nestedIndex = 0, nestedLen = oldCatSnippets.length; nestedIndex < nestedLen; nestedIndex++) {\r\n          if (oldCatSnippets[nestedIndex].id == snippetAndCategory.snippet.id) {\r\n            break;\r\n          }\r\n        }\r\n        oldCatSnippets.splice(nestedIndex, 1);\r\n        dataStore.push(snippetToWriteOut);\r\n        changedSnippets.push(snippetToWriteOut.id);\r\n\r\n        jf.writeFileSync(oldCategoryPath, oldCatSnippets);\r\n      }\r\n      cb();\r\n    } else {\r\n      console.log('Snippet was edited from UI. Snippet ID: ' + snippetToWriteOut.id);\r\n      cb();\r\n    }\r\n  };\r\n\r\n  var createFuncContext = function(snippetToSearch) {\r\n    return function(cb) {\r\n      findSnippet(snippetToSearch.id, function(snippetAndCategory) {\r\n        foundSnippetCallback(snippetAndCategory, changedSnippets, snippetToSearch, cb);\r\n      }, config);\r\n    };\r\n  };\r\n\r\n  for (index = 0, length = snippet.length; index < length; index++) {\r\n    if (uniques.indexOf(snippet[index].id) === -1) {\r\n      uniques.push(snippet[index].id);\r\n      dataStore.push(snippet[index]);\r\n      newSnippsFound++;\r\n    } else {\r\n      asyncTasks.push(createFuncContext(snippet[index]));\r\n    }\r\n  }\r\n\r\n  async.parallel(asyncTasks, function(err, stuff) {\r\n    callback(changedSnippets, newSnippsFound);\r\n    jf.writeFileSync(dataPath, dataStore);\r\n  });\r\n};","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/bin/styleguide":"#!/usr/bin/env node\n\nvar program = require('commander');\nvar fs = require('fs');\nvar mkdir = require('mkdirp'); // required to be able to create dirs recursively for multi level\nvar q = require('q');\nvar formatter = require('format-json');\nvar pkg = require('../package.json');\nvar path = require('path');\nvar stdin = process.stdin;\nvar stdout = process.stdout;\nvar startServer  = require('../index.js');\n\nvar initialCategories = [{\n    name: 'Undefined',\n    id: 0\n}];\n\nvar getMainConfig = function(folder) {\n    return {\n        projectName: '',\n        projectUrl: '',\n        projectLogo: '',\n\n        jsResources: [],\n        viewportWidths: [320, 480, 768, 1024, 1200],\n\n        serverPort: 8889,\n        snippetTemplate: path.join('./', folder, 'template.html'),\n\n        cssVariables: [],\n        maxSassIterations: 2000,\n\n        database: path.join('./', folder, 'db'),\n        categories: path.join('./', folder, 'db', 'categories.txt'),\n        uniques: path.join('./', folder, 'db', 'uniques.txt'),\n        sassData: path.join('./', folder, 'db', 'sassdata.txt'),\n        extension: '.txt'\n    };\n};\n\nvar copyContent = function(currentFolder, rootFolder, dbFolder) {\n    var templateFolder = path.join(currentFolder, 'node_modules', 'devbridge-styleguide', 'templates'),\n        moduleFolder = path.join(currentFolder, 'node_modules', 'devbridge-styleguide'),\n        currentContents,\n        javascripts,\n        fontsFolder;\n\n    if (!fs.existsSync(rootFolder)) {\n        mkdir.sync(rootFolder);\n        mkdir.sync(dbFolder);\n        mkdir.sync(path.join(rootFolder, 'content'));\n        mkdir.sync(path.join(rootFolder, 'content', 'icons'));\n        mkdir.sync(path.join(rootFolder, 'js'));\n\n        currentContents = fs.readFileSync(path.join(moduleFolder, 'template.html'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'template.html'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'index.html'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'index.html'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'favicon.ico'));\n\n        fs.writeFileSync(path.join(rootFolder, 'favicon.ico'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'main.css'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'main.css'), currentContents);\n\n        //-----------SVGs---------------\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'db-logo.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'db-logo.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'logo-github.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'logo-github.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'logo-npm.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'logo-npm.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'angle-arrow-down.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'angle-arrow-down.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'check.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'check.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'code.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'code.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'code-css.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'code-css.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'code-html.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'code-html.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'description.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'description.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'drag.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'drag.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'pencil.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'pencil.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'question.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'question.svg'), currentContents);\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'trash.svg'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'trash.svg'), currentContents);\n\n        //-----------SVGs---------------\n\n        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'your-logo.png'), 'utf-8');\n\n        fs.writeFileSync(path.join(rootFolder, 'content', 'your-logo.png'), currentContents);\n\n        //----------javascripts----------\n        javascripts = fs.readdirSync(path.join(templateFolder, 'js'));\n\n        for (var index = 0, len = javascripts.length; index < len; index++) {\n            currentContents = fs.readFileSync(path.join(templateFolder, 'js', javascripts[index]), 'utf-8');\n            fs.writeFileSync(path.join(rootFolder, 'js', javascripts[index]), currentContents);\n        }\n    }\n\n};\n\nvar initialize = function(folder) {\n    var stdin = process.stdin,\n        stdout = process.stdout,\n        currentFolder = process.cwd(),\n        rootFolder,\n        dbFolder;\n\n    if (!folder) {\n        folder = 'styleguide';\n    }\n\n    rootFolder = path.join(currentFolder, folder);\n    dbFolder = path.join(rootFolder, 'db');\n\n    stdin.resume();\n\n    copyContent(currentFolder, rootFolder, dbFolder);\n\n    for (var index = 0, len = initialCategories.length; index < len; index++) {\n        fs.writeFileSync(path.join(dbFolder, initialCategories[index].name + '.txt'), formatter.plain([]));\n    }\n\n    fs.writeFileSync(path.join(dbFolder, 'uniques.txt'), formatter.plain([]));\n    fs.writeFileSync(path.join(dbFolder, 'sassdata.txt'), formatter.plain([]));\n    fs.writeFileSync(path.join(rootFolder, 'config.txt'), formatter.plain(getMainConfig(folder)));\n    fs.writeFileSync(path.join(dbFolder, 'categories.txt'), formatter.plain(initialCategories));\n\n    stdout.write('Styleguide was successfully initialized in working directory!');\n\n    process.exit(0);\n\n};\n\nprogram\n    .version(pkg.version)\n    .description(pkg.description)\n    .usage('<command>');\n\nprogram\n    .command('initialize [folder]')\n    .description('initialize styleguide in working directory, if no folder specified - defaults to ./styleguide')\n    .action(initialize);\n\nprogram\n    .command('start')\n    .description('Starts styleguide server API')\n    .action(startServer.startServer);\n\nprogram.parse(process.argv);\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/gulpfile.js":"var gulp = require('gulp');\nvar sass = require('gulp-sass');\nvar sassvg = require('gulp-sassvg');\nvar autoprefixer = require('gulp-autoprefixer');\n\ngulp.task('sass', function () {\n    return gulp.src('./templates/scss/main.scss')\n        .pipe(sass({\n            outputStyle: 'compressed',\n            includePaths: require('node-bourbon').includePaths\n        }).on('error', sass.logError))\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions']\n        }))\n        .pipe(gulp.dest('./templates/content'))\n        .pipe(gulp.dest('./_demo/styleguide/content'));\n});\n\ngulp.task('sassvg', function () {\n    return gulp.src('./templates/content/icons/**/*.svg')\n        .pipe(sassvg({\n            outputFolder: './templates/scss/icons'\n        }));\n});\n\ngulp.task('icons', ['sassvg'], function(callback) {\n    return gulp.start('sass');\n});\n\ngulp.task('watch', function () {\n    gulp.watch(['./templates/scss/**/*.scss', '!./templates/scss/icons/*.scss'], ['sass']);\n});\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/templates/js/clipboard.js":"/*!\r\n * clipboard.js v1.5.5\r\n * https://zenorocha.github.io/clipboard.js\r\n *\r\n * Licensed MIT © Zeno Rocha\r\n */\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Clipboard = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\nvar matches = require('matches-selector')\r\n\r\nmodule.exports = function (element, selector, checkYoSelf) {\r\n  var parent = checkYoSelf ? element : element.parentNode\r\n\r\n  while (parent && parent !== document) {\r\n    if (matches(parent, selector)) return parent;\r\n    parent = parent.parentNode\r\n  }\r\n}\r\n\r\n},{\"matches-selector\":2}],2:[function(require,module,exports){\r\n\r\n/**\r\n * Element prototype.\r\n */\r\n\r\nvar proto = Element.prototype;\r\n\r\n/**\r\n * Vendor function.\r\n */\r\n\r\nvar vendor = proto.matchesSelector\r\n  || proto.webkitMatchesSelector\r\n  || proto.mozMatchesSelector\r\n  || proto.msMatchesSelector\r\n  || proto.oMatchesSelector;\r\n\r\n/**\r\n * Expose `match()`.\r\n */\r\n\r\nmodule.exports = match;\r\n\r\n/**\r\n * Match `el` to `selector`.\r\n *\r\n * @param {Element} el\r\n * @param {String} selector\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nfunction match(el, selector) {\r\n  if (vendor) return vendor.call(el, selector);\r\n  var nodes = el.parentNode.querySelectorAll(selector);\r\n  for (var i = 0; i < nodes.length; ++i) {\r\n    if (nodes[i] == el) return true;\r\n  }\r\n  return false;\r\n}\r\n},{}],3:[function(require,module,exports){\r\nvar closest = require('closest');\r\n\r\n/**\r\n * Delegates event to a selector.\r\n *\r\n * @param {Element} element\r\n * @param {String} selector\r\n * @param {String} type\r\n * @param {Function} callback\r\n * @return {Object}\r\n */\r\nfunction delegate(element, selector, type, callback) {\r\n    var listenerFn = listener.apply(this, arguments);\r\n\r\n    element.addEventListener(type, listenerFn);\r\n\r\n    return {\r\n        destroy: function() {\r\n            element.removeEventListener(type, listenerFn);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Finds closest match and invokes callback.\r\n *\r\n * @param {Element} element\r\n * @param {String} selector\r\n * @param {String} type\r\n * @param {Function} callback\r\n * @return {Function}\r\n */\r\nfunction listener(element, selector, type, callback) {\r\n    return function(e) {\r\n        e.delegateTarget = closest(e.target, selector, true);\r\n\r\n        if (e.delegateTarget) {\r\n            callback.call(element, e);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = delegate;\r\n\r\n},{\"closest\":1}],4:[function(require,module,exports){\r\n/**\r\n * Check if argument is a HTML element.\r\n *\r\n * @param {Object} value\r\n * @return {Boolean}\r\n */\r\nexports.node = function(value) {\r\n    return value !== undefined\r\n        && value instanceof HTMLElement\r\n        && value.nodeType === 1;\r\n};\r\n\r\n/**\r\n * Check if argument is a list of HTML elements.\r\n *\r\n * @param {Object} value\r\n * @return {Boolean}\r\n */\r\nexports.nodeList = function(value) {\r\n    var type = Object.prototype.toString.call(value);\r\n\r\n    return value !== undefined\r\n        && (type === '[object NodeList]' || type === '[object HTMLCollection]')\r\n        && ('length' in value)\r\n        && (value.length === 0 || exports.node(value[0]));\r\n};\r\n\r\n/**\r\n * Check if argument is a string.\r\n *\r\n * @param {Object} value\r\n * @return {Boolean}\r\n */\r\nexports.string = function(value) {\r\n    return typeof value === 'string'\r\n        || value instanceof String;\r\n};\r\n\r\n/**\r\n * Check if argument is a function.\r\n *\r\n * @param {Object} value\r\n * @return {Boolean}\r\n */\r\nexports.function = function(value) {\r\n    var type = Object.prototype.toString.call(value);\r\n\r\n    return type === '[object Function]';\r\n};\r\n\r\n},{}],5:[function(require,module,exports){\r\nvar is = require('./is');\r\nvar delegate = require('delegate');\r\n\r\n/**\r\n * Validates all params and calls the right\r\n * listener function based on its target type.\r\n *\r\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\r\n * @param {String} type\r\n * @param {Function} callback\r\n * @return {Object}\r\n */\r\nfunction listen(target, type, callback) {\r\n    if (!target && !type && !callback) {\r\n        throw new Error('Missing required arguments');\r\n    }\r\n\r\n    if (!is.string(type)) {\r\n        throw new TypeError('Second argument must be a String');\r\n    }\r\n\r\n    if (!is.function(callback)) {\r\n        throw new TypeError('Third argument must be a Function');\r\n    }\r\n\r\n    if (is.node(target)) {\r\n        return listenNode(target, type, callback);\r\n    }\r\n    else if (is.nodeList(target)) {\r\n        return listenNodeList(target, type, callback);\r\n    }\r\n    else if (is.string(target)) {\r\n        return listenSelector(target, type, callback);\r\n    }\r\n    else {\r\n        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\r\n    }\r\n}\r\n\r\n/**\r\n * Adds an event listener to a HTML element\r\n * and returns a remove listener function.\r\n *\r\n * @param {HTMLElement} node\r\n * @param {String} type\r\n * @param {Function} callback\r\n * @return {Object}\r\n */\r\nfunction listenNode(node, type, callback) {\r\n    node.addEventListener(type, callback);\r\n\r\n    return {\r\n        destroy: function() {\r\n            node.removeEventListener(type, callback);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Add an event listener to a list of HTML elements\r\n * and returns a remove listener function.\r\n *\r\n * @param {NodeList|HTMLCollection} nodeList\r\n * @param {String} type\r\n * @param {Function} callback\r\n * @return {Object}\r\n */\r\nfunction listenNodeList(nodeList, type, callback) {\r\n    Array.prototype.forEach.call(nodeList, function(node) {\r\n        node.addEventListener(type, callback);\r\n    });\r\n\r\n    return {\r\n        destroy: function() {\r\n            Array.prototype.forEach.call(nodeList, function(node) {\r\n                node.removeEventListener(type, callback);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Add an event listener to a selector\r\n * and returns a remove listener function.\r\n *\r\n * @param {String} selector\r\n * @param {String} type\r\n * @param {Function} callback\r\n * @return {Object}\r\n */\r\nfunction listenSelector(selector, type, callback) {\r\n    return delegate(document.body, selector, type, callback);\r\n}\r\n\r\nmodule.exports = listen;\r\n\r\n},{\"./is\":4,\"delegate\":3}],6:[function(require,module,exports){\r\nfunction select(element) {\r\n    var selectedText;\r\n\r\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\r\n        element.focus();\r\n        element.setSelectionRange(0, element.value.length);\r\n\r\n        selectedText = element.value;\r\n    }\r\n    else {\r\n        if (element.hasAttribute('contenteditable')) {\r\n            element.focus();\r\n        }\r\n\r\n        var selection = window.getSelection();\r\n        var range = document.createRange();\r\n\r\n        range.selectNodeContents(element);\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n\r\n        selectedText = selection.toString();\r\n    }\r\n\r\n    return selectedText;\r\n}\r\n\r\nmodule.exports = select;\r\n\r\n},{}],7:[function(require,module,exports){\r\nfunction E () {\r\n\t// Keep this empty so it's easier to inherit from\r\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\r\n}\r\n\r\nE.prototype = {\r\n\ton: function (name, callback, ctx) {\r\n    var e = this.e || (this.e = {});\r\n\r\n    (e[name] || (e[name] = [])).push({\r\n      fn: callback,\r\n      ctx: ctx\r\n    });\r\n\r\n    return this;\r\n  },\r\n\r\n  once: function (name, callback, ctx) {\r\n    var self = this;\r\n    function listener () {\r\n      self.off(name, listener);\r\n      callback.apply(ctx, arguments);\r\n    };\r\n\r\n    listener._ = callback\r\n    return this.on(name, listener, ctx);\r\n  },\r\n\r\n  emit: function (name) {\r\n    var data = [].slice.call(arguments, 1);\r\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\r\n    var i = 0;\r\n    var len = evtArr.length;\r\n\r\n    for (i; i < len; i++) {\r\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  off: function (name, callback) {\r\n    var e = this.e || (this.e = {});\r\n    var evts = e[name];\r\n    var liveEvents = [];\r\n\r\n    if (evts && callback) {\r\n      for (var i = 0, len = evts.length; i < len; i++) {\r\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\r\n          liveEvents.push(evts[i]);\r\n      }\r\n    }\r\n\r\n    // Remove event from queue to prevent memory leak\r\n    // Suggested by https://github.com/lazd\r\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\r\n\r\n    (liveEvents.length)\r\n      ? e[name] = liveEvents\r\n      : delete e[name];\r\n\r\n    return this;\r\n  }\r\n};\r\n\r\nmodule.exports = E;\r\n\r\n},{}],8:[function(require,module,exports){\r\n'use strict';\r\n\r\nexports.__esModule = true;\r\n\r\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\r\n\r\nvar _select = require('select');\r\n\r\nvar _select2 = _interopRequireDefault(_select);\r\n\r\n/**\r\n * Inner class which performs selection from either `text` or `target`\r\n * properties and then executes copy or cut operations.\r\n */\r\n\r\nvar ClipboardAction = (function () {\r\n    /**\r\n     * @param {Object} options\r\n     */\r\n\r\n    function ClipboardAction(options) {\r\n        _classCallCheck(this, ClipboardAction);\r\n\r\n        this.resolveOptions(options);\r\n        this.initSelection();\r\n    }\r\n\r\n    /**\r\n     * Defines base properties passed from constructor.\r\n     * @param {Object} options\r\n     */\r\n\r\n    ClipboardAction.prototype.resolveOptions = function resolveOptions() {\r\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\r\n        this.action = options.action;\r\n        this.emitter = options.emitter;\r\n        this.target = options.target;\r\n        this.text = options.text;\r\n        this.trigger = options.trigger;\r\n\r\n        this.selectedText = '';\r\n    };\r\n\r\n    /**\r\n     * Decides which selection strategy is going to be applied based\r\n     * on the existence of `text` and `target` properties.\r\n     */\r\n\r\n    ClipboardAction.prototype.initSelection = function initSelection() {\r\n        if (this.text && this.target) {\r\n            throw new Error('Multiple attributes declared, use either \"target\" or \"text\"');\r\n        } else if (this.text) {\r\n            this.selectFake();\r\n        } else if (this.target) {\r\n            this.selectTarget();\r\n        } else {\r\n            throw new Error('Missing required attributes, use either \"target\" or \"text\"');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n\r\n    ClipboardAction.prototype.selectFake = function selectFake() {\r\n        var _this = this;\r\n\r\n        this.removeFake();\r\n\r\n        this.fakeHandler = document.body.addEventListener('click', function () {\r\n            return _this.removeFake();\r\n        });\r\n\r\n        this.fakeElem = document.createElement('textarea');\r\n        this.fakeElem.style.position = 'absolute';\r\n        this.fakeElem.style.left = '-9999px';\r\n        this.fakeElem.style.top = (window.pageYOffset || document.documentElement.scrollTop) + 'px';\r\n        this.fakeElem.setAttribute('readonly', '');\r\n        this.fakeElem.value = this.text;\r\n\r\n        document.body.appendChild(this.fakeElem);\r\n\r\n        this.selectedText = _select2['default'](this.fakeElem);\r\n        this.copyText();\r\n    };\r\n\r\n    /**\r\n     * Only removes the fake element after another click event, that way\r\n     * a user can hit `Ctrl+C` to copy because selection still exists.\r\n     */\r\n\r\n    ClipboardAction.prototype.removeFake = function removeFake() {\r\n        if (this.fakeHandler) {\r\n            document.body.removeEventListener('click');\r\n            this.fakeHandler = null;\r\n        }\r\n\r\n        if (this.fakeElem) {\r\n            document.body.removeChild(this.fakeElem);\r\n            this.fakeElem = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Selects the content from element passed on `target` property.\r\n     */\r\n\r\n    ClipboardAction.prototype.selectTarget = function selectTarget() {\r\n        this.selectedText = _select2['default'](this.target);\r\n        this.copyText();\r\n    };\r\n\r\n    /**\r\n     * Executes the copy operation based on the current selection.\r\n     */\r\n\r\n    ClipboardAction.prototype.copyText = function copyText() {\r\n        var succeeded = undefined;\r\n\r\n        try {\r\n            succeeded = document.execCommand(this.action);\r\n        } catch (err) {\r\n            succeeded = false;\r\n        }\r\n\r\n        this.handleResult(succeeded);\r\n    };\r\n\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param {Boolean} succeeded\r\n     */\r\n\r\n    ClipboardAction.prototype.handleResult = function handleResult(succeeded) {\r\n        if (succeeded) {\r\n            this.emitter.emit('success', {\r\n                action: this.action,\r\n                text: this.selectedText,\r\n                trigger: this.trigger,\r\n                clearSelection: this.clearSelection.bind(this)\r\n            });\r\n        } else {\r\n            this.emitter.emit('error', {\r\n                action: this.action,\r\n                trigger: this.trigger,\r\n                clearSelection: this.clearSelection.bind(this)\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes current selection and focus from `target` element.\r\n     */\r\n\r\n    ClipboardAction.prototype.clearSelection = function clearSelection() {\r\n        if (this.target) {\r\n            this.target.blur();\r\n        }\r\n\r\n        window.getSelection().removeAllRanges();\r\n    };\r\n\r\n    /**\r\n     * Sets the `action` to be performed which can be either 'copy' or 'cut'.\r\n     * @param {String} action\r\n     */\r\n\r\n    /**\r\n     * Destroy lifecycle.\r\n     */\r\n\r\n    ClipboardAction.prototype.destroy = function destroy() {\r\n        this.removeFake();\r\n    };\r\n\r\n    _createClass(ClipboardAction, [{\r\n        key: 'action',\r\n        set: function set() {\r\n            var action = arguments.length <= 0 || arguments[0] === undefined ? 'copy' : arguments[0];\r\n\r\n            this._action = action;\r\n\r\n            if (this._action !== 'copy' && this._action !== 'cut') {\r\n                throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the `action` property.\r\n         * @return {String}\r\n         */\r\n        get: function get() {\r\n            return this._action;\r\n        }\r\n\r\n        /**\r\n         * Sets the `target` property using an element\r\n         * that will be have its content copied.\r\n         * @param {Element} target\r\n         */\r\n    }, {\r\n        key: 'target',\r\n        set: function set(target) {\r\n            if (target !== undefined) {\r\n                if (target && typeof target === 'object' && target.nodeType === 1) {\r\n                    this._target = target;\r\n                } else {\r\n                    throw new Error('Invalid \"target\" value, use a valid Element');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the `target` property.\r\n         * @return {String|HTMLElement}\r\n         */\r\n        get: function get() {\r\n            return this._target;\r\n        }\r\n    }]);\r\n\r\n    return ClipboardAction;\r\n})();\r\n\r\nexports['default'] = ClipboardAction;\r\nmodule.exports = exports['default'];\r\n\r\n},{\"select\":6}],9:[function(require,module,exports){\r\n'use strict';\r\n\r\nexports.__esModule = true;\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nvar _clipboardAction = require('./clipboard-action');\r\n\r\nvar _clipboardAction2 = _interopRequireDefault(_clipboardAction);\r\n\r\nvar _tinyEmitter = require('tiny-emitter');\r\n\r\nvar _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);\r\n\r\nvar _goodListener = require('good-listener');\r\n\r\nvar _goodListener2 = _interopRequireDefault(_goodListener);\r\n\r\n/**\r\n * Base class which takes one or more elements, adds event listeners to them,\r\n * and instantiates a new `ClipboardAction` on each click.\r\n */\r\n\r\nvar Clipboard = (function (_Emitter) {\r\n    _inherits(Clipboard, _Emitter);\r\n\r\n    /**\r\n     * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\r\n     * @param {Object} options\r\n     */\r\n\r\n    function Clipboard(trigger, options) {\r\n        _classCallCheck(this, Clipboard);\r\n\r\n        _Emitter.call(this);\r\n\r\n        this.resolveOptions(options);\r\n        this.listenClick(trigger);\r\n    }\r\n\r\n    /**\r\n     * Helper function to retrieve attribute value.\r\n     * @param {String} suffix\r\n     * @param {Element} element\r\n     */\r\n\r\n    /**\r\n     * Defines if attributes would be resolved using internal setter functions\r\n     * or custom functions that were passed in the constructor.\r\n     * @param {Object} options\r\n     */\r\n\r\n    Clipboard.prototype.resolveOptions = function resolveOptions() {\r\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\r\n        this.action = typeof options.action === 'function' ? options.action : this.defaultAction;\r\n        this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;\r\n        this.text = typeof options.text === 'function' ? options.text : this.defaultText;\r\n    };\r\n\r\n    /**\r\n     * Adds a click event listener to the passed trigger.\r\n     * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\r\n     */\r\n\r\n    Clipboard.prototype.listenClick = function listenClick(trigger) {\r\n        var _this = this;\r\n\r\n        this.listener = _goodListener2['default'](trigger, 'click', function (e) {\r\n            return _this.onClick(e);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Defines a new `ClipboardAction` on each click event.\r\n     * @param {Event} e\r\n     */\r\n\r\n    Clipboard.prototype.onClick = function onClick(e) {\r\n        var trigger = e.delegateTarget || e.currentTarget;\r\n\r\n        if (this.clipboardAction) {\r\n            this.clipboardAction = null;\r\n        }\r\n\r\n        this.clipboardAction = new _clipboardAction2['default']({\r\n            action: this.action(trigger),\r\n            target: this.target(trigger),\r\n            text: this.text(trigger),\r\n            trigger: trigger,\r\n            emitter: this\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Default `action` lookup function.\r\n     * @param {Element} trigger\r\n     */\r\n\r\n    Clipboard.prototype.defaultAction = function defaultAction(trigger) {\r\n        return getAttributeValue('action', trigger);\r\n    };\r\n\r\n    /**\r\n     * Default `target` lookup function.\r\n     * @param {Element} trigger\r\n     */\r\n\r\n    Clipboard.prototype.defaultTarget = function defaultTarget(trigger) {\r\n        var selector = getAttributeValue('target', trigger);\r\n\r\n        if (selector) {\r\n            return document.querySelector(selector);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Default `text` lookup function.\r\n     * @param {Element} trigger\r\n     */\r\n\r\n    Clipboard.prototype.defaultText = function defaultText(trigger) {\r\n        return getAttributeValue('text', trigger);\r\n    };\r\n\r\n    /**\r\n     * Destroy lifecycle.\r\n     */\r\n\r\n    Clipboard.prototype.destroy = function destroy() {\r\n        this.listener.destroy();\r\n\r\n        if (this.clipboardAction) {\r\n            this.clipboardAction.destroy();\r\n            this.clipboardAction = null;\r\n        }\r\n    };\r\n\r\n    return Clipboard;\r\n})(_tinyEmitter2['default']);\r\n\r\nfunction getAttributeValue(suffix, element) {\r\n    var attribute = 'data-clipboard-' + suffix;\r\n\r\n    if (!element.hasAttribute(attribute)) {\r\n        return;\r\n    }\r\n\r\n    return element.getAttribute(attribute);\r\n}\r\n\r\nexports['default'] = Clipboard;\r\nmodule.exports = exports['default'];\r\n\r\n},{\"./clipboard-action\":8,\"good-listener\":5,\"tiny-emitter\":7}]},{},[9])(9)\r\n});","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/templates/js/editor.js":"var editorService = (function ($) {\r\n    var module = {};\r\n    var edits = [];\r\n\r\n    //module editor controls: toggle full screen by html button\r\n    var toggleFullScreen = function (editor, e) {\r\n        e.preventDefault();\r\n        editor\r\n            .keyBinding\r\n            .$handlers[0]\r\n            .commands['Toggle Fullscreen']\r\n            .exec(editor);\r\n    };\r\n\r\n    //module global editor controls\r\n    var editorCommands = function () {\r\n        var dom = require('ace/lib/dom'),\r\n            commands = require('ace/commands/default_commands').commands;\r\n\r\n        //editor controls: toggle screen function by keyboard\r\n        commands.push({\r\n            name: 'Toggle Fullscreen',\r\n            bindKey: 'F11',\r\n            exec: function (editor) {\r\n                dom.toggleCssClass(document.body, 'fullScreen');\r\n                dom.toggleCssClass(editor.container, 'fullScreen-editor');\r\n                editor.resize();\r\n                editor.focus();\r\n            }\r\n        });\r\n\r\n        //editor controls: exit screen function by keyboard\r\n        commands.push({\r\n            name: 'Exit Fullscreen',\r\n            bindKey: 'ESC',\r\n            exec: function (editor) {\r\n                dom.removeCssClass(document.body, 'fullScreen');\r\n                dom.removeCssClass(editor.container, 'fullScreen-editor');\r\n                editor.resize();\r\n            }\r\n        });\r\n\r\n        //editor controls: update snippet when ctrl + s\r\n        commands.push({\r\n            name: 'Save on Ctrl-S',\r\n            bindKey: {\r\n                win: 'Ctrl-S',\r\n                mac: 'Command-S'\r\n            },\r\n            exec: function(editor) {\r\n                $(editor.container)\r\n                    .parents(\".js-edit-snippet, .js-create-snippet\")\r\n                    .find('button[type=\"submit\"]')\r\n                    .click(); //button click triggers validation\r\n            }\r\n        });\r\n    };\r\n\r\n    //module editors configuration for new snippet\r\n    var addToNewForm = function () {\r\n        var codeEditor,\r\n            cssEditor;\r\n\r\n        //html\r\n        codeEditor = ace.edit('jsNewCode');\r\n        codeEditor.setTheme('ace/theme/idle_fingers');\r\n        codeEditor.setOptions({\r\n            fontSize: \"13px\"\r\n        });\r\n        codeEditor\r\n            .getSession()\r\n            .setMode('ace/mode/html');\r\n        codeEditor\r\n            .getSession()\r\n            .setUseWorker(false);\r\n\r\n        //css\r\n        cssEditor = ace.edit('jsNewCss');\r\n        cssEditor.setValue('#snippet { \\n  \\n}');\r\n        cssEditor.setTheme('ace/theme/idle_fingers');\r\n        cssEditor\r\n            .getSession()\r\n            .setMode('ace/mode/css');\r\n        cssEditor\r\n            .getSession()\r\n            .setUseWorker(false);\r\n\r\n        //events binding - editor full screen buttons\r\n        $('.js-toggle-code-editor-full-screen').on('click', $.proxy(toggleFullScreen, null, codeEditor));\r\n        $('.js-toggle-css-editor-full-screen').on('click', $.proxy(toggleFullScreen, null, cssEditor));\r\n    };\r\n\r\n    //module editors configuration for editable snippets\r\n    module.addToEditForm = function (snippetContainer) {\r\n        var snippetId = snippetContainer.attr('class').match(/(^|\\s)snippet-\\S+(\\s|$)/).shift().trim(),\r\n            codeId = snippetId + '-code',\r\n            cssId = snippetId + '-css',\r\n            codeEditor = snippetContainer.find('.js-edit-code'),\r\n            cssEditor = snippetContainer.find('.js-edit-css'),\r\n            editors = {};\r\n\r\n        function defineEditor (currentEditor, currentId, mode, type) {\r\n            currentEditor.attr('id', currentId);\r\n            currentEditor = ace.edit(currentId);\r\n            currentEditor.setTheme('ace/theme/idle_fingers');\r\n            currentEditor.setOptions({\r\n                fontSize: \"13px\"\r\n            });;\r\n            currentEditor\r\n                .getSession()\r\n                .setMode('ace/mode/' + mode);\r\n            currentEditor\r\n                .getSession()\r\n                .setUseWorker(false);\r\n\r\n            snippetContainer\r\n                .find('.js-toggle-' + type + '-full-screen')\r\n                .on('click', $.proxy(toggleFullScreen, null, currentEditor));\r\n\r\n            return currentEditor;\r\n        }\r\n\r\n        editors.code = defineEditor(codeEditor, codeId, 'html', 'code');\r\n        editors.css = defineEditor(cssEditor, cssId, 'css', 'css');\r\n\r\n        return editors;\r\n    };\r\n\r\n    //module destroy editors when edit mode is closed\r\n    module.removeFromEditForm = function (snippetContainer) {\r\n        var snippetId = snippetContainer.attr('class').match(/(^|\\s)snippet-\\S+(\\s|$)/).shift().trim(),\r\n            codeId = snippetId + '-code',\r\n            cssId = snippetId + '-css';\r\n\r\n        function removeFromEditor(currentId, type) {\r\n            var currentEditor = ace.edit(currentId),\r\n                tempText = currentEditor.getValue(),\r\n                containerClone = currentEditor.container.cloneNode(false);\r\n\r\n            containerClone.textContent = currentEditor.getValue();\r\n\r\n            currentEditor.destroy();\r\n\r\n            // Replace container with cloned copy to remove all event listeners\r\n            currentEditor.container.parentNode.replaceChild(containerClone, currentEditor.container);\r\n\r\n            snippetContainer\r\n                .find('.js-toggle-' + type + '-full-screen')\r\n                .off('click');\r\n        }\r\n\r\n        removeFromEditor(codeId, 'code');\r\n        removeFromEditor(cssId, 'css');\r\n    };\r\n\r\n    module.init = function () {\r\n        editorCommands();\r\n        addToNewForm();\r\n    };\r\n\r\n    return module;\r\n})(jQuery || {});\r\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/templates/js/iframes.js":"var iframesService = (function ($, snippetService) {\r\n    var module = {},\r\n        cachedConfig;\r\n\r\n    var getConfig = function (callback) {\r\n        if (!cachedConfig) {\r\n            $.getJSON('./config.txt', function (data) {\r\n                cachedConfig = data;\r\n                callback(cachedConfig);\r\n            });\r\n        } else {\r\n            callback(cachedConfig);\r\n        }\r\n    };\r\n\r\n    var getDefaultTemplate = function () {\r\n        return '' +\r\n            '<head lang=\"en\">' +\r\n                '<meta charset=\"UTF-8\">' +\r\n                '<title>Snippet Iframe</title>' +\r\n                '<style type=\"text/css\">' +\r\n                    'body, html{margin: 0; height: 100%}' +\r\n                    'body > div{ height: 100%}' +\r\n                '</style>' +\r\n            '</head>' +\r\n            '<body>' +\r\n                '<div id=\"snippet\"></div>' +\r\n            '</body>';\r\n    };\r\n\r\n    var constructFrames = function (snippets, callback) {\r\n        var index,\r\n            framesArray = [],\r\n            tempFrame,\r\n            len = snippets.length;\r\n\r\n        for (index = 0; len > index; index++) {\r\n            tempFrame = $('<iframe></iframe>');\r\n            //tempFrame.attr('sandbox', 'allow-same-origin allow-scripts allow-popups');\r\n            tempFrame.attr('id', 'snippet-' + snippets[index].id);\r\n            framesArray.push(tempFrame);\r\n        }\r\n        callback(framesArray);\r\n    };\r\n\r\n    module.constructFrame = function (snippet, callback) {\r\n        var tempFrame = $('<iframe></iframe>');\r\n\r\n        //tempFrame.attr('sandbox', 'allow-same-origin allow-scripts allow-popups');\r\n        tempFrame.attr('id', 'snippet-' + snippet.id);\r\n\r\n        callback(tempFrame);\r\n    };\r\n\r\n    module.getTemplate = function (callback) {\r\n        getConfig(function (config) {\r\n            if (!config.snippetTemplate) {\r\n                callback(getDefaultTemplate());\r\n            } else {\r\n                $.get('//' + location.host + '/' + config.snippetTemplate, function (data) {\r\n                    callback(data);\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    module.getJavaScripts = function (callback) {\r\n        getConfig(function (config) {\r\n            if (config.jsResources) {\r\n                callback(config.jsResources);\r\n            } else {\r\n                console.log('No JavaScript files are defined in configuration to load into iframe.');\r\n            }\r\n        });\r\n    };\r\n\r\n    module.formFramesForStatic = function (snippets, callback) {\r\n        constructFrames(snippets, function (frames) {\r\n            callback(frames, snippets);\r\n        });\r\n    };\r\n\r\n    module.formFramesForCategory = function (categoryId, callback) {\r\n        snippetService.getByCategoryId(categoryId, function (snippets) {\r\n            constructFrames(snippets, function (frames) {\r\n                callback(frames, snippets);\r\n            });\r\n        });\r\n    };\r\n\r\n    module.formFramesForDeleted = function (callback) {\r\n        snippetService.getDeletedSnippets(function (snippets) {\r\n            constructFrames(snippets, function (frames) {\r\n                callback(frames, snippets);\r\n            });\r\n        });\r\n    };\r\n\r\n    return module;\r\n})(jQuery || {}, snippetService);","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/templates/js/jquery.modal.js":"/*global jQuery, define*/\n\n// Uses AMD or browser globals to create a jQuery plugin.\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    var version = '0.1',\n        openCount = 0,\n        openModals = [],\n        noop = function () { },\n        fakeConsole = { log: noop },\n        console = window.console || fakeConsole,\n\n        getDefaultOptions = function () {\n            return {\n                loader: '<div class=\"modal-loader\" role=\"status\">Loading...</div>',\n                htmlClass: 'modal-on',\n                className: null,\n                closeOnBlur: true,\n                closeOnEscape: true,\n                templateId: null,\n                openEffect: 'fadeIn',\n                openDuration: 100,\n                closeEffect: 'fadeOut',\n                closeDuration: 100,\n                autofocus: true,\n                debug: false,\n                keepPosition: true\n            };\n        },\n\n        getDefaultTemplate = function () {\n            return '<div class=\"modal-context\" role=\"dialog\">' + //alertdialog\n                '  <div class=\"modal-container\" data-modal-control=\"container\" role=\"region\">' +\n                '    <div class=\"modal-title\" data-modal-control=\"title\" role=\"heading\"></div>' +\n                '    <button class=\"modal-close\" data-modal-control=\"close\"></button>' +\n                '    <div class=\"modal-content\" data-modal-control=\"content\"></div>' +\n                '  </div>' +\n                '</div>';\n        },\n\n        getTemplate = function (options) {\n            var template = null,\n                tplContainer;\n\n            if (options.templateId) {\n                tplContainer = $('#' + options.templateId);\n                if (tplContainer.length) {\n                    template = tplContainer.html();\n                }\n            }\n\n            return template || getDefaultTemplate();\n        };\n\n    function Modal(options) {\n        var that = this;\n        that.options = $.extend(getDefaultOptions(), options);\n        that.template = getTemplate(that.options);\n        that.context = $(that.template);\n        that.container = $('[data-modal-control=\"container\"]', that.context);\n        that.contentContainer = $('[data-modal-control=\"content\"]', that.context);\n        that.titleContainer = $('[data-modal-control=\"title\"]', that.context);\n        that.eventHandlers = [];\n        that.positionAtOpen = 0;\n\n        if (!options.debug){\n            that.console = fakeConsole;\n        }\n\n        // Initialize modal popup:\n        that.init();\n    }\n\n    Modal.version = version;\n\n    Modal.openCount = function () {\n        return openCount;\n    };\n\n    Modal.openModals = function () {\n        return openModals;\n    };\n\n    Modal.parseOptions = function (element) {\n        /*jslint evil: true*/\n        var el = $(element),\n            value = el.attr('data-modal'),\n            options = (new Function('return ' + value)()) || {};\n\n        // Verify if URL is local link:\n        options.url = options.url || el.attr('href');\n\n        // Get title:\n        options.title = options.title || el.attr('title') || el.text();\n\n        return options;\n    };\n\n    Modal.prototype = {\n\n        version: version,\n\n        init: function () {\n            var that = this,\n                options = that.options;\n\n            if (options.width) {\n                that.container.width(options.width);\n            }\n\n            if (options.height) {\n                that.contentContainer.height(options.height);\n            }\n\n            if (options.className) {\n                that.context.addClass(options.className);\n            }\n\n            that.context.on('click', '[data-modal-control=\"close\"]', function () {\n                that.close();\n            });\n\n            that.context.on('click', function (e) {\n                // Only close if was clicked on\n                if (options.closeOnBlur && e.target === this) {\n                    that.close();\n                }\n            });\n\n            that.on('close', options.onClose || noop);\n            that.on('load', options.onLoad || noop);\n\n            that.title(that.options.title);\n        },\n\n        option: function (option, value) {\n            var options = this.options;\n            if (arguments.length === 1) {\n                return options[option];\n            }\n            options[option] = value;\n            return this;\n        },\n\n        open: function () {\n            var that = this,\n                options = that.options,\n                fx = options.openEffect,\n                durration = options.openDuration;\n\n            that.context.appendTo('body');\n            if (fx && durration && that.context[fx]) {\n                that.context.hide()[fx](durration);\n            }\n            that.loadContent();\n            openCount += 1;\n            openModals.push(this);\n\n            if (openCount === 1) {\n                that.onFirstOpen();\n            }\n        },\n\n        close: function (force) {\n            var that = this,\n                options = that.options,\n                fx = options.closeEffect,\n                durration = options.closeDuration,\n                finalize = function () {\n                    that.context.remove();\n                    openCount -= 1;\n                    openModals.pop();\n                    if (openCount === 0) {\n                        that.onLastClose();\n                    }\n                };\n\n            if (force || that.fire('close') !== false) {\n                if (fx && durration && that.context[fx]) {\n                    that.context[fx](durration).promise().done(finalize);\n                } else {\n                    finalize();\n                }\n            }\n        },\n\n        loadContent: function () {\n            var that = this,\n                options = that.options,\n                url = options.url,\n                content;\n\n            if (options.content) {\n                // Return before seting content, otherwise loaded event will not fire\n                setTimeout(function () { that.content(options.content); }, 0);\n                return;\n            }\n\n            if (url && url[0] === '#') {\n                content = $(url).html();\n                setTimeout(function () { that.content(content); }, 0);\n                return;\n            }\n\n            if (url) {\n                that.showLoader();\n                $.ajax({\n                    url: url\n                }).done(function (data) {\n                    that.content(data);\n                });\n            }\n        },\n\n        title: function (value) {\n            if (arguments.length === 0) {\n                return this.options.title;\n            }\n\n            this.options.title = value;\n            this.titleContainer.html(value);\n        },\n\n        content: function (value) {\n            var that = this,\n                options = that.options,\n                contentContainer = that.contentContainer;\n\n            if (arguments.length === 0) {\n                return options.content;\n            }\n\n            options.content = value;\n            contentContainer.html(value);\n\n            if (options.autofocus) {\n                contentContainer.find('input:text:first').focus();\n            }\n\n            that.fire('load');\n        },\n\n        showLoader: function () {\n            this.contentContainer.html(this.options.loader);\n        },\n\n        on: function (eventName, callback) {\n            this.eventHandlers[eventName] = callback;\n            return this;\n        },\n\n        fire: function (eventName) {\n            console.log('Fire: ' + eventName);\n            return (this.eventHandlers[eventName] || noop).call(this);\n        },\n\n        onFirstOpen: function () {\n            this.positionAtOpen = $(window).scrollTop();\n            $('html').addClass(this.options.htmlClass);\n        },\n\n        onLastClose: function () {\n            $('html').removeClass(this.options.htmlClass);\n            if(this.options.keepPosition === true) {\n                $(window).scrollTop(this.positionAtOpen);\n            }\n        }\n    };\n\n    $.Modal = Modal;\n\n    $.fn.openModal = function (options) {\n        return this.each(function () {\n            var parsedOptions = Modal.parseOptions(this),\n                modalOptions = $.extend({}, parsedOptions, options || {}),\n                modal = new Modal(modalOptions);\n\n            modal.open();\n            return false;\n        });\n    };\n\n    $.openModal = function (options) {\n        var modal = new Modal(options);\n        modal.open();\n        return modal;\n    };\n\n    // Close last open window when escape is pressed:\n    $(window).on('keyup', function (e) {\n        // Exit if not escape:\n        if (e.which !== 27) { return; }\n\n        // Find last popup and trigger close:\n        var modal = openModals[openModals.length - 1];\n        if (modal && modal.options.closeOnEscape) {\n            modal.close();\n        }\n    });\n}));","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/templates/js/main.js":"(function ($, window, document, editorService, snippetActions, iframesService) {\r\n    function Plugin(element) {\r\n        this.$element = $(element);\r\n        this.events();\r\n    }\r\n\r\n    Plugin.prototype = {\r\n        events: function () {\r\n                //buttons\r\n            var $btnSettings = this.$element.find(\".js-snippet-settings-btn\"),\r\n                $btnCode = this.$element.find(\".js-snippet-code-btn\"),\r\n                $btnCancel = this.$element.find(\".js-btn-cancel\"),\r\n                //panels\r\n                $settings = this.$element.find(\".js-snippet-settings\"),\r\n                $code = this.$element.find(\".js-snippet-code\"),\r\n                //inside settings\r\n                $preview = this.$element.find(\".js-snippet-preview\"),\r\n                $previewSource = $preview.find(\"iframe\"),\r\n                //viewport\r\n                $handleLeft = this.$element.find(\".js-snippet-resize-handle-left\"),\r\n                $handleRight = this.$element.find(\".js-snippet-resize-handle-right\"),\r\n                $sizeIndicator = this.$element.find(\".js-snippet-size\"),\r\n                $resizeLength = this.$element.find(\".js-resize-length\"),\r\n                //data\r\n                snippetSource = \".js-snippet-source\",\r\n                editors,\r\n                originalValues = {},\r\n\r\n                timer,\r\n                snippetTemplate;\r\n\r\n            //live preview functions\r\n            function delay(callback, ms) {\r\n                clearTimeout (timer);\r\n                timer = setTimeout(callback, ms);\r\n            }\r\n\r\n            function onSourceChange() {\r\n                delay(function(){\r\n                    snippetActions.appendIframeContent($previewSource, snippetTemplate, editors.code.getValue(), editors.css.getValue());\r\n                    if (!snippetActions.isIE) {\r\n                        $previewSource.load($.proxy(snippetActions.appendIframeContent, null, $previewSource, snippetTemplate, editors.code.getValue(), editors.css.getValue()));\r\n                    }\r\n                }, 500);\r\n            }\r\n\r\n            //module snippet's edit button and cancel button\r\n            $btnSettings\r\n                .add($btnCancel) //elements merge\r\n                .on(\"click\", function () {\r\n\r\n                    // hide code\r\n                    $btnCode\r\n                        .removeClass(\"active\")\r\n                        .text(\"Show code\")\r\n                        .attr(\"data-toggle-text\", \"Hide code\");\r\n                    $code.removeClass(\"active\");\r\n                    // $('.js-snippet-settings').removeClass('active');\r\n                    // $('.js-snippet-code-btn').removeClass('active');\r\n\r\n                    // toggle settings\r\n                    $btnSettings.toggleClass(\"active\");\r\n                    $settings.toggleClass(\"active\");\r\n\r\n                    iframesService.getTemplate(function (template) {\r\n                        if ($btnSettings.hasClass(\"active\")) {\r\n                            editors = editorService.addToEditForm($code.parent());\r\n                            originalValues.code = editors.code.getValue();\r\n                            originalValues.css = editors.css.getValue();\r\n                            snippetTemplate = template;\r\n                            var $tabAction = $(\".js-snippet-edit-action\"),\r\n                                $tabSource = $(\".js-snippet-edit-src\");\r\n\r\n                            $tabAction.on('click', function () {\r\n                                var self = $(this),\r\n                                    id = self.attr('data-target');\r\n\r\n                                if (id) {\r\n                                    $tabAction.parent().removeClass('is-active');\r\n                                    self.parent().addClass('is-active');\r\n\r\n                                    $tabSource.removeClass('is-active');\r\n                                    self.closest('.js-edit-snippet').find('#' + id).addClass('is-active');\r\n                                }\r\n                            });\r\n\r\n                            editors\r\n                                .code\r\n                                .on('change', onSourceChange);\r\n                            editors\r\n                                .css\r\n                                .on('change', onSourceChange);\r\n                        } else {\r\n                            editors\r\n                                .code\r\n                                .off('change', onSourceChange);\r\n                            editors\r\n                                .css\r\n                                .off('change', onSourceChange);\r\n\r\n                            if (!$previewSource.hasClass('updated')) {\r\n                                snippetActions.appendIframeContent($previewSource, snippetTemplate, originalValues.code, originalValues.css);\r\n                                if (!snippetActions.isIE) {\r\n                                    $previewSource.load($.proxy(snippetActions.appendIframeContent, null, $previewSource, snippetTemplate, editors.code.getValue(), editors.css.getValue()));\r\n                                }\r\n\r\n                                editors\r\n                                    .code\r\n                                    .setValue(originalValues.code);\r\n                                editors\r\n                                    .css\r\n                                    .setValue(originalValues.css);\r\n                            }\r\n\r\n                            $previewSource.removeClass('updated');\r\n                            editorService.removeFromEditForm($code.parent());\r\n                        }\r\n                    });\r\n                });\r\n\r\n            //module 'show code' button for snippet editing\r\n            $btnCode.on(\"click\", function () {\r\n                var currentText = $btnCode.text(),\r\n                    toggleText = $btnCode.attr(\"data-toggle-text\");\r\n\r\n                //hide settings\r\n                $btnSettings.removeClass(\"active\");\r\n                $settings.removeClass(\"active\");\r\n\r\n                //toggle code\r\n                $btnCode\r\n                    .toggleClass(\"active\")\r\n                    .text(toggleText)\r\n                    .attr(\"data-toggle-text\", currentText);\r\n                $code.toggleClass(\"active\");\r\n            });\r\n\r\n            //module draggable snippet sizer\r\n            interact($resizeLength[0])\r\n                .resizable({\r\n                    edges: {\r\n                        left: $handleRight[0],\r\n                        right: $handleLeft[0],\r\n                        bottom: false,\r\n                        top: false\r\n                    },\r\n                    onmove: function (e) {\r\n                        var width = e.rect.width,\r\n                            windowWidth = $(window).width();\r\n\r\n                        if (width < 160) {\r\n                            width = 160;\r\n                        } else if ((width * 2) + 100 > windowWidth) {\r\n                            width = (windowWidth - 100) / 2;\r\n                        }\r\n\r\n                        $preview\r\n                            .find(snippetSource)\r\n                            .addClass('resize-overlay');\r\n                        $preview[0].style.width = (width * 2) + 'px';\r\n                        $resizeLength[0].style.width = width + 'px';\r\n                        $sizeIndicator.text((width * 2) + \"px\");\r\n                        snippetActions.handleHeights($previewSource);\r\n                    },\r\n                    onend: function () {\r\n                        $preview\r\n                            .find(snippetSource)\r\n                            .removeClass('resize-overlay');\r\n                        snippetActions.handleHeights($previewSource);\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    $.fn.sgSnippet = function () {\r\n        return this.each(function () {\r\n            if (!$.data(this, \"sgSnippet\")) {\r\n                $.data(this, \"sgSnippet\", new Plugin(this));\r\n            }\r\n        });\r\n    };\r\n})(jQuery, window, document, editorService, snippetActions, iframesService);\r\n\r\n$(document).ready(function () {\r\n    viewService.init();\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/templates/js/sass.js":"var sassService = (function ($) {\r\n    var module = {},\r\n        cachedSassData;\r\n\r\n    var getSassData = function (callback) {\r\n        if (!cachedSassData) {\r\n            $.getJSON('./db/sassdata.txt', function (data) {\r\n                cachedSassData = data;\r\n                callback(cachedSassData);\r\n            });\r\n        } else {\r\n            callback(cachedSassData);\r\n        }\r\n    };\r\n\r\n    var parseHsv = function (rgb) {\r\n        var hsv,\r\n            hue = 0,\r\n            sat,\r\n            val,\r\n            chr,\r\n            max,\r\n            min;\r\n\r\n        rgb = rgb.replace(/[rgb()]/g, '').split(',').map(Number);\r\n\r\n        rgb[0] = rgb[0] / 255;\r\n        rgb[1] = rgb[1] / 255;\r\n        rgb[2] = rgb[2] / 255;\r\n\r\n        max = Math.max.apply(Math, rgb);\r\n        min = Math.min.apply(Math, rgb);\r\n\r\n        val = max;\r\n        chr = max - min;\r\n\r\n        sat = max === 0 ? 0 : chr / max;\r\n\r\n        if (max === min) {\r\n            hue = 0;\r\n        } else {\r\n            switch (max) {\r\n                case rgb[0]:\r\n                    hue = (rgb[1] - rgb[2]) / chr + (rgb[1] < rgb[2] ? 6 : 0);\r\n                    break;\r\n                case rgb[1]:\r\n                    hue = (rgb[2] - rgb[0]) / chr + 2;\r\n                    break;\r\n                case rgb[2]:\r\n                    hue = (rgb[0] - rgb[1]) / chr + 4;\r\n                    break;\r\n            }\r\n            hue /= 6;\r\n        }\r\n\r\n        hsv = {\r\n            hue: hue,\r\n            sat: sat,\r\n            val: val\r\n        };\r\n\r\n        return hsv;\r\n    };\r\n\r\n    var colorComparator = function (a, b) {\r\n        var aColor = a.find('span').css('background-color'),\r\n            bColor = b.find('span').css('background-color');\r\n\r\n        aColor = parseHsv(aColor);\r\n        bColor = parseHsv(bColor);\r\n\r\n        if (aColor.hue < bColor.hue)\r\n            return 1;\r\n        if (aColor.hue > bColor.hue)\r\n            return -1;\r\n        if (aColor.sat < bColor.sat)\r\n            return 1;\r\n        if (aColor.sat > bColor.sat)\r\n            return -1;\r\n        if (aColor.val < bColor.val)\r\n            return 1;\r\n        if (aColor.val > bColor.val)\r\n            return -1;\r\n        return 0;\r\n    };\r\n\r\n    var parseColors = function (colors) {\r\n        var colorsContainer = $('.js-snippet-colors').first(),\r\n            colorBoxTpl = $('.js-color-box').first(),\r\n            currentColorBox,\r\n            colorBoxes = [],\r\n            color,\r\n            len,\r\n            index;\r\n        //varName;\r\n\r\n        //colorBoxTpl.find('p').remove();\r\n\r\n        colorsContainer.empty();\r\n\r\n        for (color in colors) {\r\n            if (colors.hasOwnProperty(color)) {\r\n                currentColorBox = colorBoxTpl.clone(true);\r\n                currentColorBox\r\n                .find('span')\r\n                .css('background', color)\r\n                .attr('data-color-text', color);\r\n\r\n                //for (index = 0, len = colors[color].length; index < len; index++) {\r\n                //    varName = $('<p>' + colors[color][index] + '</p>');\r\n                //    currentColorBox.append(varName);\r\n                //}\r\n\r\n                colorBoxes.push(currentColorBox);\r\n            }\r\n        }\r\n\r\n        colorBoxes.sort(colorComparator);\r\n\r\n        for (index = 0, len = colorBoxes.length; index < len; index++) {\r\n            colorsContainer.append(colorBoxes[index]);\r\n        }\r\n    };\r\n\r\n    var parseFonts = function (typography) {\r\n        var fontsContainer = $('.js-fonts-container'),\r\n            fontTpl = $('.js-font-tpl'),\r\n            currentFontView,\r\n            currentFont,\r\n            index,\r\n            len = typography.length,\r\n            weightsInd,\r\n            weightsLen,\r\n            fontDescription;\r\n\r\n        fontsContainer.empty();\r\n\r\n        for (index = 0; index < len; index++) {\r\n            currentFont = typography[index];\r\n\r\n            fontDescription = currentFont.variable + ': ' + currentFont.value + ';';\r\n\r\n            if (currentFont.weights) {\r\n                weightsLen = currentFont.weights.length;\r\n\r\n                for (weightsInd = 0; weightsInd < weightsLen; weightsInd++) {\r\n                    currentFontView = fontTpl.clone(true);\r\n\r\n                    currentFontView\r\n                    .find('.js-set-font')\r\n                    .css({\r\n                        'font-family': currentFont.value,\r\n                        'font-weight': currentFont.weights[weightsInd].weight,\r\n                        'font-style': currentFont.weights[weightsInd].italic ? 'italic' : 'normal'\r\n                    });\r\n\r\n                    fontDescription = currentFont.variable + ': ' + currentFont.value + '; ' + 'font-weight: ' + currentFont.weights[weightsInd].weight + ';';\r\n\r\n                    if (currentFont.weights[weightsInd].italic) {\r\n                        fontDescription += ' font-style: italic;';\r\n                    }\r\n\r\n                    currentFontView\r\n                    .find('.js-variable')\r\n                    .text(fontDescription);\r\n\r\n                    fontsContainer.append(currentFontView);\r\n                }\r\n\r\n                if (index < len - 1) {\r\n                    fontsContainer.append('<li><hr></li>');\r\n                }\r\n            } else {\r\n                fontsContainer.append('Weights were not defined for ' + currentFont.variable + '.<br>');\r\n            }\r\n        }\r\n    };\r\n\r\n    module.loadSass = function () {\r\n        getSassData(function (data) {\r\n            var sassContent = $($('#sass-page').html()),\r\n                scrapeMessage = $($('#scrape-message').html()),\r\n                snippetsContents,\r\n                snippets = [];\r\n\r\n            if (!data.length || $.isEmptyObject(data[0].typography) && $.isEmptyObject(data[0].colors)) {\r\n                $('.main').append(scrapeMessage);\r\n                return;\r\n            }\r\n\r\n            $('.main').append(sassContent);\r\n\r\n            if (!$.isEmptyObject(data[0].colors)) {\r\n                parseColors(data[0].colors);\r\n            }else {\r\n                $('.js-colors').hide();\r\n            }\r\n\r\n            if (!$.isEmptyObject(data[0].typography)) {\r\n                parseFonts(data[0].typography);\r\n            }else {\r\n                $('.js-fonts').hide();\r\n            }\r\n\r\n            snippetsContents = $(\".js-styles-preview\");\r\n\r\n            snippetsContents.each(function (index, value) {\r\n                snippets.push({\r\n                    id: 'static-' + index,\r\n                    content: $(value).html()\r\n                });\r\n            });\r\n\r\n            iframesService.formFramesForStatic(snippets, function (frames, snippets) {\r\n                snippetActions.drawStaticSnippets(frames, snippets, snippetsContents);\r\n            });\r\n        });\r\n    };\r\n\r\n    return module;\r\n})(jQuery || {});","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/templates/js/snippetActions.js":"var snippetActions = (function ($, snippetService, iframesService, editorService, viewService) {\r\n    var module = {},\r\n        ua = window.navigator.userAgent;\r\n\r\n    module.isIE = !!ua.match(/MSIE|Trident/);\r\n\r\n    var injectJavaScript = function (iframe, source) {\r\n        var scriptTag = iframe.contentWindow.document.createElement('script');\r\n\r\n        scriptTag.type = 'text/javascript';\r\n        scriptTag.src = source;\r\n        scriptTag.async = false;\r\n\r\n        iframe\r\n            .contentWindow\r\n            .document\r\n            .body\r\n            .appendChild(scriptTag);\r\n    };\r\n\r\n    var deleteHandler = function () {\r\n        var idToDelete = $(this).data('id'),\r\n            modalContent,\r\n            modal;\r\n\r\n        modalContent = '' +\r\n            '<p>Are you sure you want to delete this snippet?</p>' +\r\n            '<div class=\"btn-holder\">' +\r\n                '<button class=\"btn-primary js-confirm-delete\">Yes</button>' +\r\n                '<button class=\"btn-blank\" data-modal-control=\"close\">No</button>' +\r\n            '</div>';\r\n\r\n        modal = $.openModal({\r\n            title: 'Snippet Deletion',\r\n            width: 500,\r\n            content: modalContent,\r\n            onLoad: function () {\r\n                $('.js-confirm-delete').on('click', function (e) {\r\n                    e.preventDefault();\r\n                    modal.close();\r\n                    snippetService.deleteById(idToDelete, function (data) {\r\n                        var content;\r\n                        if (typeof data === 'object' && data.isDeleted) {\r\n                            $('#' + data.id).detach();\r\n                            content = 'Snippet <span class=\"sg-notification-item-highlight\">' + data.name + '</span> was deleted from <span class=\"sg-notification-item-highlight\">' + categoryService.getCategoryNameById(snippet.category) + '</span> category, but you can find it in Deleted Snippets page which you can reach from \"+\" menu';\r\n                        } else {\r\n                            content = data;\r\n                        }\r\n                        viewService\r\n                            .notifications\r\n                            .pushMessage(\"Snippet Deletion: \" + content);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    module.appendIframeContent = function (frameId, template, content, css, includeJs) {\r\n        var frame = $(frameId).contents(),\r\n            rawJsFrame,\r\n            frameHTML = $(frame).find('html').get(0),\r\n            index,\r\n            length,\r\n            resources,\r\n            resourcesLength,\r\n            resourcesLoaded = 0,\r\n            loadingIndicator = $('<div class=\"spinner-wrapper\"><div class=\"spinner\"></div></div>'),\r\n            loadCount = parseFloat($(frameId).attr(\"data-load-count\"));\r\n\r\n        if (!loadCount) {\r\n            loadCount = 0;\r\n        }\r\n\r\n        $(frameId)\r\n            .attr(\"data-load-count\", loadCount + 1)\r\n            .parent()\r\n            .append(loadingIndicator);\r\n\r\n        if (template) {\r\n            frameHTML.innerHTML = template;\r\n        }\r\n\r\n        frame\r\n            .find('style#snippet-style')\r\n            .empty()\r\n            .append(css)\r\n            .end()\r\n            .find('#snippet')\r\n            .html(content)\r\n            .end()\r\n            .find('script')\r\n            .remove();\r\n\r\n        if (includeJs === true || includeJs === \"true\") {\r\n            rawJsFrame = document.getElementById(frameId.attr('id'));\r\n\r\n            iframesService.getJavaScripts(function (jsResources) {\r\n                length = jsResources.length;\r\n\r\n                for (index = 0; index < length; index++) {\r\n                    injectJavaScript(rawJsFrame, jsResources[index]);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (loadCount === 0) {\r\n            resources = $(frameHTML).find(\"link, script, img\");\r\n            resourcesLength = resources.length;\r\n\r\n            if (resourcesLength === 0) {\r\n                setTimeout(function () {\r\n                    module.handleHeights($(frameId));\r\n                    loadingIndicator.remove();\r\n                }, 250);\r\n            } else {\r\n                resources.on(\"load error\", function () {\r\n                    resourcesLoaded++;\r\n                    if (resourcesLoaded === resourcesLength) {\r\n                        setTimeout(function () {\r\n                            module.handleHeights($(frameId));\r\n                            loadingIndicator.remove();\r\n                        }, 250);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            setTimeout(function () {\r\n                module.handleHeights($(frameId));\r\n                loadingIndicator.remove();\r\n            }, 750);\r\n        }\r\n    };\r\n\r\n    var clearOutForm = function (form) {\r\n        var fields = form.find('.js-form-submit-field'),\r\n            len = fields.length,\r\n            index;\r\n\r\n        for (index = 0; len > index; index++) {\r\n            $(fields[index]).val('');\r\n        }\r\n\r\n        ace\r\n            .edit('jsNewCss')\r\n            .setValue('#snippet { \\n  \\n}');\r\n        ace\r\n            .edit('jsNewCode')\r\n            .setValue('');\r\n    };\r\n\r\n    var drawSnippet = function (template, snippet, frame) {\r\n        var snippetId = frame.attr('id'),\r\n            snippetContents,\r\n            currentSnippetElement = $($('#snippet').html()).clone(true),\r\n\r\n            // array iterators\r\n            currentField,\r\n            fieldIndex,\r\n            fieldLen,\r\n\r\n            // text\r\n            snippetName = currentSnippetElement.find('.js-snippet-name'),\r\n            snippetDescription =  currentSnippetElement.find('.js-snippet-description'), //inside code view\r\n\r\n            // form\r\n            snippetEdit = currentSnippetElement.find('.js-edit-snippet'), //panel\r\n            snippetEditCode =  currentSnippetElement.find('.js-edit-code'),\r\n            snippetEditCss =  currentSnippetElement.find('.js-edit-css'),\r\n            snippetIncludeJs = currentSnippetElement.find('.form-include-js'),\r\n            snippetDelete = currentSnippetElement.find('.js-snippet-delete'),\r\n            snippetCategorySelect = currentSnippetElement.find('.js-form-select'),\r\n\r\n            // copy\r\n            snippetCopyCode = currentSnippetElement.find('.js-copy-code'),\r\n            snippetCodePreview = currentSnippetElement.find('.js-snippet-code-preview'),\r\n\r\n            // view\r\n            snippetSource = currentSnippetElement.find('.js-snippet-source'),\r\n            snippetPreview = currentSnippetElement.find('.js-snippet-preview'),\r\n\r\n            // snippet viewport text\r\n            snippetSize = currentSnippetElement.find('.js-snippet-size'),\r\n\r\n            // resizing functionality\r\n            snippetResizeLength = currentSnippetElement.find(\".js-resize-length\"),\r\n\r\n            includeJs = snippet.includeJs,\r\n            formFields = snippetEdit.find('.js-form-submit-field'),\r\n            resolution = viewService.getDefaultResolution(),\r\n            iframeWindow;\r\n\r\n        currentSnippetElement.attr('id', snippet.id);\r\n\r\n        if(includeJs === \"true\" || includeJs === true) {\r\n            includeJs = true;\r\n        } else if (includeJs === \"false\" || includeJs === false) {\r\n            includeJs = false;\r\n        }\r\n\r\n        // text\r\n        snippetName.html(snippet.name);\r\n\r\n        if (snippet.description.length > 0){\r\n            snippetDescription.html(snippet.description).addClass('have-content');\r\n        }\r\n\r\n        // form\r\n        snippetEditCode.text(snippet.code);\r\n        snippetEditCss.text(snippet.inlineCss);\r\n        snippetIncludeJs.prop('checked', includeJs);\r\n        categoryService.bindCategoriesToForm(snippetCategorySelect);\r\n        snippetEdit.submit({isNew: false}, snippetActions.createEditSnippet);\r\n\r\n        if (!snippet.isDeleted) {\r\n            snippetDelete\r\n                .attr('data-id', snippet.id)\r\n                .on('click', deleteHandler);\r\n        } else {\r\n            snippetDelete.addClass('hidden');\r\n        }\r\n\r\n        // copy\r\n        snippetCopyCode.attr('data-clipboard-text', snippet.code);\r\n        snippetCodePreview.text(snippet.code);\r\n\r\n        // view\r\n        snippetSource\r\n            .html(frame)\r\n            .append('<div></div>');\r\n\r\n        // viewport size\r\n        snippetSize.text(resolution + \"px\");\r\n        snippetResizeLength.css(\"width\", parseInt(resolution / 2, 10));\r\n\r\n        currentSnippetElement.addClass(snippetId);\r\n\r\n        iframeWindow = snippetPreview.find('iframe').get(0);\r\n        iframeWindow.style.width = resolution;\r\n        snippetPreview.css('width', resolution);\r\n\r\n        for (fieldIndex = 0, fieldLen = formFields.length; fieldIndex < fieldLen; fieldIndex++) {\r\n            currentField = $(formFields[fieldIndex]);\r\n            currentField.val(snippet[currentField.data('js-field-name')]);\r\n        }\r\n\r\n        currentSnippetElement.sgSnippet();\r\n        currentSnippetElement.appendTo('.main');\r\n        snippetContents = $('#' + snippetId);\r\n\r\n        // executes on Chrome, IE, FF(does something on FF but is not needed for it to work)\r\n        module.appendIframeContent(snippetContents, template, snippet.code, snippet.inlineCss, includeJs);\r\n        if (!module.isIE) {\r\n            //executes on FF, very likely to crash on IE(with multiple iFrames on the page) so check is performed, does not get executed on Chrome\r\n            snippetContents.load($.proxy(module.appendIframeContent, null, snippetContents, template, snippet.code, snippet.inlineCss, includeJs));\r\n        }\r\n\r\n    };\r\n\r\n    var submitSnippet = function (data, form) {\r\n        snippetService.postNew(data, function (snippet) {\r\n            var modalContent;\r\n            if (typeof snippet === 'string') {\r\n                //error\r\n                modalContent = snippet;\r\n            } else if (typeof snippet === 'object') {\r\n                //snippet creation in current category\r\n                if(snippet.category === viewService.getCurrentView().id) {\r\n                    iframesService.constructFrame(snippet, function (frame) {\r\n                        iframesService.getTemplate(function (template) {\r\n                            drawSnippet(template, snippet, frame);\r\n                        });\r\n                    });\r\n                }\r\n\r\n                modalContent = 'New snippet <span class=\"sg-notification-item-highlight\">' + snippet.name + '</span> was added to <span class=\"sg-notification-item-highlight\">' + categoryService.getCategoryNameById(snippet.category) + '</span> category.';\r\n                clearOutForm(form);\r\n                $(\".js-new-snippet-form\").toggleClass(\"active\");\r\n            }\r\n\r\n            form.removeClass('preloading');\r\n            viewService\r\n                .notifications\r\n                .pushMessage(\"Snippet Creation: \" + modalContent);\r\n        });\r\n    };\r\n\r\n    var submitUpdatedSnippet = function (data, snippetId, snippetContainer, form) {\r\n        snippetService.putEdited(data, snippetId, function (snippet) {\r\n            var modalContent;\r\n\r\n            if (typeof snippet === 'object') {\r\n                //edit update\r\n                var snippetContents,\r\n                    includeJs = snippet.includeJs;\r\n\r\n                //if id changed\r\n                if (snippet.category !== viewService.getCurrentView().id) {\r\n                    snippetContainer.remove();\r\n                    return;\r\n                }\r\n\r\n                if(includeJs === \"true\" || includeJs === true) {\r\n                    includeJs = true;\r\n                } else if (includeJs === \"false\" || includeJs === false) {\r\n                    includeJs = false;\r\n                }\r\n\r\n                snippetContainer\r\n                    .find('.js-snippet-name')\r\n                    .html(snippet.name);\r\n                snippetContainer\r\n                    .find('.js-snippet-description')\r\n                    .html(snippet.description);\r\n                snippetContainer\r\n                    .find('.js-snippet-code-preview')\r\n                    .text(snippet.code);\r\n                snippetContainer\r\n                    .find('.js-copy-code')\r\n                    .attr('data-clipboard-text', snippet.code);\r\n\r\n                if (snippet.description.length > 0){\r\n                    snippetContainer.find('.js-snippet-description').addClass('have-content');\r\n                }else {\r\n                    snippetContainer.find('.js-snippet-description').removeClass('have-content');\r\n                }\r\n\r\n                snippetContents = snippetContainer.find('iframe');\r\n\r\n                module.appendIframeContent(snippetContents, null, snippet.code, snippet.inlineCss, includeJs);\r\n                if (!module.isIE) { //crashes on IE\r\n                    snippetContents.load($.proxy(module.appendIframeContent, null, snippetContents, null, snippet.code, snippet.inlineCss, includeJs));\r\n                }\r\n\r\n                snippetContents.addClass('updated');\r\n                modalContent = 'Snippet <span class=\"sg-notification-item-highlight\">' + snippet.name + '</span> was updated and you can find it in <span class=\"sg-notification-item-highlight\">' + categoryService.getCategoryNameById(snippet.category) + '</span> category.';\r\n            } else {\r\n                //edit error\r\n                modalContent = snippet;\r\n            }\r\n\r\n            form.removeClass('preloading');\r\n            viewService\r\n                .notifications\r\n                .pushMessage(\"Snippet Update: \" + modalContent);\r\n        });\r\n    };\r\n\r\n    module.createEditSnippet = function(e) {\r\n        e.preventDefault();\r\n\r\n        var isNew = e.data.isNew,\r\n            form = $(this),\r\n            data = {},\r\n\r\n            //fields\r\n            fields = form.find('.js-form-submit-field'),\r\n            currentField,\r\n\r\n            //errors\r\n            annotations,\r\n            errors = [],\r\n            errorText,\r\n\r\n            //arrays\r\n            len = fields.length,\r\n            index,\r\n\r\n            //editors\r\n            snippetId,\r\n            code,\r\n            css,\r\n\r\n            //modal\r\n            modal,\r\n            modalTitle;\r\n\r\n        form.addClass('preloading');\r\n\r\n        if (isNew) {\r\n            modalTitle = 'Snippet Creation';\r\n            code = ace.edit('jsNewCode');\r\n            css = ace.edit('jsNewCss');\r\n        } else {\r\n            modalTitle = 'Snippet Update';\r\n            snippetId = form.closest('.js-snippet').attr('id');\r\n            code = ace.edit('snippet-' + snippetId + '-code');\r\n            css = ace.edit('snippet-' + snippetId + '-css');\r\n        }\r\n\r\n        for (index = 0; len > index; index++) {\r\n            currentField = $(fields[index]);\r\n            data[currentField.data('js-field-name')] = currentField.val();\r\n        }\r\n\r\n        data.includeJs = form.find('.form-include-js').is(':checked');\r\n\r\n        annotations = code.getSession().getAnnotations();\r\n        for (index = 0, len = annotations.length; index < len; index++) {\r\n            if (annotations[index].type === 'error') {\r\n                errors.push(annotations[index]);\r\n            }\r\n        }\r\n\r\n        annotations = css.getSession().getAnnotations();\r\n        for (index = 0, len = annotations.length; index < len; index++) {\r\n            if (annotations[index].type === 'error') {\r\n                errors.push(annotations[index]);\r\n            }\r\n        }\r\n\r\n        function submitFunction () {\r\n            data.code = code.getValue();\r\n            data.inlineCss = css.getValue();\r\n            if (isNew) {\r\n                submitSnippet(data, form);\r\n            } else {\r\n                submitUpdatedSnippet(data, snippetId, form.closest('.js-snippet'), form);\r\n            }\r\n        }\r\n\r\n        if (errors.length > 0) {\r\n            errorText = '' +\r\n                '<p>Your HTML or CSS syntax contains errors!</p>' +\r\n                '<p>Are you sure you to submit your snippet?</p>' +\r\n                '<div class=\"btn-holder\">' +\r\n                    '<button class=\"btn-primary js-confirm-create\">Yes</button>' +\r\n                    '<button class=\"btn-blank\" data-modal-control=\"close\">No</button>' +\r\n                '</div>';\r\n\r\n            modal = $.openModal({\r\n                title: modalTitle,\r\n                width: 500,\r\n                content: errorText,\r\n                onLoad: function () {\r\n                    $('.js-confirm-create').on('click', function (e) {\r\n                        e.preventDefault();\r\n                        modal.close();\r\n                        submitFunction();\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            submitFunction();\r\n        }\r\n    };\r\n\r\n    module.drawSnippets = function (frames, snippets) {\r\n        var index,\r\n            len = frames.length;\r\n        iframesService.getTemplate(function (template) {\r\n            for (index = 0; len > index; index++) {\r\n                drawSnippet(template, snippets[index], frames[index]);\r\n            }\r\n        });\r\n    };\r\n\r\n    module.drawStaticSnippets = function (frames, snippets, snippetsContents) {\r\n        var index,\r\n            len = snippets.length,\r\n            tempCode,\r\n            snippetFrame;\r\n\r\n        iframesService.getTemplate(function (template) {\r\n            for (index = 0; len > index; index++) {\r\n                //save source code\r\n                tempCode = $(snippets[index].content).clone();\r\n\r\n                //create frame\r\n                $(snippetsContents[index])\r\n                    .html(frames[index])\r\n                    .append('<div></div>');\r\n\r\n                //select frame\r\n                snippetFrame = $('#snippet-' + snippets[index].id);\r\n\r\n                //iframe magic\r\n                module.appendIframeContent(snippetFrame, template, tempCode, \"body {min-width: 0 !important;} #snippet {overflow: hidden;}\", false);\r\n                if (!module.isIE) { //crashes on IE\r\n                    snippetFrame.load($.proxy(module.appendIframeContent, null, snippetFrame, template, tempCode, \"body {min-width: 0 !important;} #snippet {overflow: hidden;}\", false));\r\n                }\r\n\r\n                snippetFrame\r\n                    .contents()\r\n                    .find(\"#snippet\")\r\n                    .css(\"overflow\", \"hidden\");\r\n            }\r\n        });\r\n    };\r\n\r\n    module.handleHeights = function (iframes) {\r\n        var len = iframes.length,\r\n            index,\r\n            snippet,\r\n            overflow,\r\n            overflowData,\r\n            height;\r\n\r\n        for (index = 0; index < len; index++) {\r\n            snippet = $(iframes[index]).contents().find(\"#snippet\"); // element for height measurement\r\n            overflow = snippet.css(\"overflow\");\r\n            overflowData = snippet.attr(\"data-default-overflow\");\r\n\r\n            if (overflowData !== undefined && overflowData !== \"\") {\r\n                overflow = overflowData;\r\n            } else {\r\n                snippet.attr(\"data-default-overflow\", overflow); //sets default after first check, so temp value does not get picked on resize iterations\r\n            }\r\n\r\n            snippet.css(\"overflow\", \"scroll\"); // sets temp value for measuring\r\n            height = snippet.get(0).offsetHeight;\r\n            snippet.css(\"overflow\", overflow); // sets styling value\r\n\r\n            $(iframes[index]).height(height);\r\n        }\r\n    };\r\n\r\n    module.scrapeHandler = function (whatToScrape) {\r\n        var scrapeUrl = snippetService.getScrapePath(whatToScrape),\r\n            content,\r\n            index,\r\n            len,\r\n            request = $.ajax({\r\n                method: 'GET',\r\n                url: scrapeUrl,\r\n                data: {},\r\n                dataType: 'json'\r\n            });\r\n\r\n        request.done(function (data) {\r\n            if (whatToScrape === 'snippets') {\r\n                content = '<p>Count of found snippets: ' + data.totalFound + '</p>' + '<p>Count of new snippets: ' + data.foundNew + '</p>';\r\n\r\n                if (data.duplicateIds.length) {\r\n                    content += '<p>Duplicate IDs in your code: ' + data.duplicateIds.toString() + '</p>' + '<p><span class=\"error\">There are duplicate IDs in your code, this can cause unexpected behaviour of Styleguide!</span></p>';\r\n                } else {\r\n                    content += '<p>Duplicate IDs in your code: None.</p>';\r\n                }\r\n\r\n                if (data.changedSnippets.length) {\r\n                    content += '<p>IDs of snippets that were changed: ' + data.changedSnippets.toString() + '</p>';\r\n                } else {\r\n                    content += '<p>IDs of snippets that were changed: None.</p>';\r\n                }\r\n            } else {\r\n                var diff = 0;\r\n\r\n                for (var i = 0; i < data.length; i++) {\r\n                    diff += data[i].hasOwnProperty('uniqueColVals') ? data[i].uniqueColVals : 0;\r\n                }\r\n\r\n                if (!data.length || diff === 0) {\r\n                    var scrapeMessage = $($('#scrape-message').html());\r\n                    $('.main')\r\n                        .empty()\r\n                        .append(scrapeMessage);\r\n\r\n                    return;\r\n                }\r\n\r\n                content = '' +\r\n                    '<div class=\"sg-success-message\">' +\r\n                        '<p><strong>Scss variables has been successfully updated.</strong></p>' +\r\n                        '<span class=\"sg-check-symbol\"></span>' +\r\n                    '</div>';\r\n            }\r\n\r\n            $.openModal({\r\n                title: 'Scrape Report',\r\n                width: 500,\r\n                content: content,\r\n                onClose: function () {\r\n                    window\r\n                        .location\r\n                        .reload(true);\r\n                }\r\n            });\r\n        });\r\n\r\n        request.fail(function () {\r\n            $.openModal({\r\n                title: 'Scrape Report',\r\n                width: 500,\r\n                content: '<p>Failed to scrape ' + whatToScrape + '! Maybe your styleguide server is down?</p>'\r\n            });\r\n        });\r\n    };\r\n\r\n    return module;\r\n})(jQuery || {}, snippetService, iframesService, editorService, viewService);\r\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/templates/js/views.js":"var viewService = (function ($, editorService, sassService, categoryService, snippetService) {\n    var module = {},\n        views,\n        currentView,\n        defaultResolution,\n        isServerOn;\n\n    var bindNavClick = function (e) {\n        e.preventDefault();\n        var id = $(this).data('id');\n        redrawPage(id);\n        window\n        .history\n        .pushState(\n            {\n                id: id\n            },\n            '',\n            '#' + id\n        );\n    };\n\n    var categoriesComparator = function (a, b) {\n        return a.category.name > b.category.name;\n    };\n\n    var sortAndAppendLinks = function (navList, navLinksArr) {\n        var sass,\n            undefCat,\n            index,\n            len = navLinksArr.length;\n\n        sass = navLinksArr.map(function (el) {\n            return el.category.id;\n        }).indexOf('sass');\n        sass = navLinksArr.splice(sass, 1);\n\n        undefCat = navLinksArr.map(function (el) {\n            return el.category.name;\n        }).indexOf('undefined');\n        undefCat = navLinksArr.splice(undefCat, 1);\n\n        navLinksArr.sort(categoriesComparator);\n        navLinksArr.unshift(sass[0]);\n        navLinksArr.push(undefCat[0]);\n\n        for (index = 0; index < len; index++) {\n            navList.append(navLinksArr[index].element);\n            navLinksArr[index]\n            .element\n            .wrap(\"<li></li>\");\n        }\n    };\n\n    var buildNavigation = function (navigation, list, refreshContent) {\n        var currentPage = navigation.find('.js-current-page'),\n            navList = navigation.find(list),\n            pages = [{\n                name: 'General',\n                id: 'sass'\n            }],\n            route = window.location.hash,\n            navLinksArr = [],\n\n        //temp array variables\n            iteratingPage,\n            pageElement,\n            index,\n            len;\n\n        route = route.replace('#', '');\n\n        categoryService.getCategories(function (categories) {\n            views = pages = pages.concat(categories);\n\n            len = pages.length;\n\n            navList.empty();\n\n            if (route.length) {\n                currentView = $.grep(views, function (el) {\n                    return el.id == route;\n                }).pop();\n            } else {\n                currentView = views[0];\n                window\n                .history\n                .replaceState(\n                    {\n                        id: currentView.id\n                    },\n                    '',\n                    ''\n                );\n            }\n\n            for (index = 0; len > index; index++) {\n                iteratingPage = pages[index];\n                if (iteratingPage.id === 'sass') {\n                    pageElement = $('<button type=\"button\" class=\"active\" data-id=\"' + iteratingPage.id + '\">' + iteratingPage.name + '</button>');\n                } else {\n                    pageElement = $('<button type=\"button\" data-id=\"' + iteratingPage.id + '\">' + iteratingPage.name + '</button>');\n                }\n\n                pageElement.on('click', bindNavClick);\n\n                navLinksArr.push({\n                    element: pageElement,\n                    category: iteratingPage\n                });\n            }\n\n            sortAndAppendLinks(navList, navLinksArr);\n\n            if (refreshContent === true) {\n                redrawPage(currentView.id);\n            }\n        });\n    };\n\n    var redrawPage = function (categoryId) {\n        var snippetResizeControls = $('.js-sg-snippets-resize'),\n            introContainer = $('.js-intro-container'),\n            currentPage = $('.js-current-page');\n\n        $('.main').empty();\n\n        function snippetsPage() {\n            currentPage.text(currentView.name);\n            snippetResizeControls.show();\n        }\n\n        if (categoryId === 'sass') {\n            introContainer.show();\n        } else {\n            introContainer.hide();\n        }\n\n        if (typeof categoryId === 'number') {\n            currentView = $.grep(views, function (el) {\n                return el.id === categoryId;\n            }).pop();\n\n            iframesService.formFramesForCategory(categoryId, function (frames, snippets) {\n                snippetActions.drawSnippets(frames, snippets, defaultResolution);\n            });\n\n            snippetsPage();\n        } else if (typeof categoryId === 'string' && categoryId === 'deleted') {\n            currentView = views[views.length - 1];\n\n            iframesService.formFramesForDeleted(function (frames, snippets) {\n                snippetActions.drawSnippets(frames, snippets, defaultResolution);\n            });\n\n            snippetsPage();\n        } else {\n            currentView = views[0];\n\n            //home page\n            snippetResizeControls.hide();\n            currentPage.text(currentView.name);\n            sassService.loadSass();\n        }\n    };\n\n    var defaultResolutionsHandler = function (width, fromInput) {\n        var iFrames = $('iframe'),\n            iFramesArray = iFrames.get(),\n\n            updateField = fromInput ? false : true,\n            windowWidth = $(window).width(),\n            inputWidth = width,\n\n        //array\n            len = iFramesArray.length,\n            index;\n\n        //in case of invalid input\n        if (width < 320 || width === \"\" || isNaN(width)) {\n            width = 320;\n        }\n\n        if (width + 100 > windowWidth) {\n            width = windowWidth - 100;\n        }\n\n        //snippets elements\n        for (index = 0; index < len; index++) {\n            iFramesArray[index].style.width = width;\n        }\n        $('.js-snippet-preview').css('width', width);\n        $('.js-snippet-size').text(width + 'px');\n        $('.js-resize-length').css('width', parseInt(width / 2, 10));\n\n        //input\n        if (updateField === true) {\n            $('.js-custom-media').val(width);\n        }\n\n        //variables\n        document.cookie = \"styleguideMedia=\" + inputWidth + \"; path=/\";\n        defaultResolution = width;\n\n        //update iFrames heights to avoid scrollbars\n        snippetActions.handleHeights(iFrames);\n    };\n\n    var bindResolutionActions = function () {\n        var customInput = $('.js-custom-media'),\n            mediaList = $('.js-media-list'),\n\n            mediaCookie = document.cookie.replace(/(?:(?:^|.*;\\s*)styleguideMedia\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\"), //session cookie\n            firstValue = false, //assumed default viewport\n            windowWidth = $(window).width(),\n\n            //array\n            tempLi,\n            tempButton;\n\n        $.getJSON('./config.txt', function (data) {\n            $.each(data.viewportWidths, function (index, value) {\n                if (firstValue === false) {\n                    firstValue = data.viewportWidths[data.viewportWidths.length - 1];\n                }\n                tempLi = $('<li></li>');\n                tempButton = $('<button type=\"button\" data-size=\"' + value + '\">' + value + ' px</button>');\n                tempLi\n                    .append(tempButton)\n                    .appendTo(mediaList);\n                tempButton.on('click', function () {\n                    defaultResolutionsHandler(value);\n                });\n            });\n\n            //init value\n            if (mediaCookie !== \"\") {\n                firstValue = parseFloat(mediaCookie);\n            }\n            if(firstValue < 320 || firstValue === \"\" || isNaN(firstValue)) {\n                firstValue = 1200;\n            }\n            if (firstValue + 100 + 20 > windowWidth) {\n                firstValue = windowWidth - 100 - 20;\n            }\n\n            if (mediaCookie === \"\") {\n                document.cookie = \"styleguideMedia=\" + firstValue + \"; path=/\";\n                customInput.val(firstValue);\n                defaultResolution = firstValue;\n            } else {\n                customInput.val(mediaCookie);\n                defaultResolution = firstValue;\n            }\n        });\n\n        //viewport input field events\n        function customInputEvents (event) {\n            var width = $(this).val();\n            width = parseInt(width);\n\n            if (event.keyCode === 38 && event.type === \"keydown\") {\n                event.preventDefault(); //prevents caret jumping when at the end\n                width++;\n                customInput.val(width);\n            } else if (event.keyCode === 40 && event.type === \"keydown\") {\n                event.preventDefault(); //prevents caret jumping when at the end\n                width--;\n                customInput.val(width);\n            }\n\n            defaultResolutionsHandler(width, true);\n        }\n\n        customInput.on('keydown change keyup', customInputEvents);\n\n        //resize event to keep iframes smaller than screen\n        $(window).on('resize', function () {\n            $(\".js-snippet\").each(function (index, value) {\n                var currentSnippet = $(value),\n                    iframeJQ = currentSnippet.find('iframe'),\n                    iframeJS = iframeJQ.get(0),\n                    snippetWidth = parseFloat(currentSnippet.find('.js-snippet-preview').css('width')),\n                    resizeWindowWidth = $(window).width(),\n                    width;\n\n                if (snippetWidth + 100 > resizeWindowWidth) {\n                    width = resizeWindowWidth - 100;\n                    iframeJS.style.width = width;\n                    currentSnippet\n                        .find('.js-snippet-preview')\n                        .css('width', width)\n                        .end()\n                        .find('.js-snippet-size')\n                        .text(width + 'px')\n                        .end()\n                        .find('.js-resize-length')\n                        .css('width', parseInt(width / 2, 10));\n\n                    snippetActions.handleHeights(iframeJQ);\n                }\n            });\n        });\n    };\n\n    window.onpopstate = function (event) {\n        redrawPage(event.state.id);\n    };\n\n    var openDropdown = function () {\n        var trigger = $('.js-open-dropdown'),\n            dropdown = $('.js-dropdown-list');\n\n        trigger.on('click', function () {\n            var self = $(this);\n\n            function eventOff () {\n                self\n                    .removeClass('active')\n                    .next(dropdown)\n                    .removeClass('active');\n                $(window).off('click.notButton');\n            }\n\n            if (!self.hasClass('active')) {\n                self\n                    .addClass('active')\n                    .next(dropdown)\n                    .addClass('active');\n                setTimeout(function () {\n                    $(window).on('click.notButton', function () {\n                        eventOff();\n                    });\n                }, 5);\n            } else {\n                eventOff();\n            }\n        });\n    };\n\n    var newSnippetControls = function () {\n        var $newSnippetForm = $(\".js-new-snippet-form\"),\n            $newSnippetBtnOpen = $(\".js-header-new-snippet\"),\n            $newSnippetCancel = $(\".js-new-snippet-cancel\"),\n            $tabAction = $(\".js-snippet-tab-action\"),\n            $tabSource = $(\".js-snippet-tab-src\");\n\n        //module 'new snippet' button\n        $newSnippetBtnOpen.on(\"click\", function () {\n\n            $newSnippetForm.toggleClass(\"active\");\n\n            ace\n                .edit('jsNewCss')\n                .resize();\n            ace\n                .edit('jsNewCode')\n                .resize();\n            setTimeout(function () {\n                $('#new-name').focus();\n            }, 200);\n        });\n\n        $tabAction.on('click', function () {\n            var self = $(this),\n                id = self.attr('data-target');\n\n            if (id) {\n                $tabAction.parent().removeClass('is-active');\n                self.parent().addClass('is-active');\n\n                $tabSource.removeClass('is-active');\n                $('#' + id).addClass('is-active');\n            }\n        });\n\n        //module 'cancel' button for new snippet creation\n        $newSnippetCancel.on(\"click\", function () {\n            $newSnippetForm.removeClass(\"active\");\n        });\n    };\n\n    var categoriesUpdateActions = function () {\n        buildNavigation($('.js-navigation'), '.js-navigation-list', true);\n        buildNavigation($('.js-home-navigation'), '.js-navigation-list', false);\n        categoryService.bindCategoriesToForm($('.js-form-select').first());\n    };\n\n    var categoryControls = function () {\n        var categoriesButton = $(\".js-categories-button\"),\n            modalContent;\n\n        function categoryMarkup (name, id, editMode) {\n            //elements\n            var categoryLine = $('<li class=\"sg-category-line\" data-category-id=\"' + id +'\"></li>'),\n\n                categoryInputWrapper = $('<div class=\"sg-field-wrapper\"></div>'),\n                categoryName = $('<input placeholder=\"Category Name\" class=\"sg-category-name\" type=\"text\" value=\"' + name + '\" readonly>'),\n\n                categoryControls = $('<div class=\"sg-category-controls sg-opened\"></div>'),\n                categoryControlsInner = $('<div class=\"sg-category-controls-inner\"></div>'),\n                categoryDelete = $('<button class=\"sg-category-button sg-delete\" type=\"button\">Delete</button>'),\n                categoryEdit = $('<button class=\"sg-category-button sg-edit\" type=\"button\">Edit</button>'),\n\n                categoryDeleteWrapper = $('<div class=\"sg-category-controls\"></div>'),\n                categoryDeleteInnerWrapper = $('<div class=\"sg-category-controls-inner\"></div>'),\n                categoryDeleteConfirm = $('<button class=\"sg-category-button sg-negative\" type=\"button\">Delete</button>'),\n                categoryDeleteCancel = $('<button class=\"sg-category-button sg-cancel\" type=\"button\">Cancel</button>'),\n\n                categoryEditWrapper = $('<div class=\"sg-category-controls\"></div>'),\n                categoryEditInnerWrapper = $('<div class=\"sg-category-controls-inner\"></div>'),\n                categoryEditConfirm = $('<button class=\"sg-category-button sg-positive\" type=\"button\">Save</button>'),\n                categoryEditCancel = $('<button class=\"sg-category-button sg-cancel\" type=\"button\">Cancel</button>');\n\n\n            //TODO edit mode on field focus: enter = save, esc = cancel\n            //delete workflow\n            categoryDelete.on('click', function () {\n                categoryDeleteWrapper.addClass(\"sg-opened\");\n                categoryName.focus();\n                categoryControls.addClass(\"sg-hidden\");\n            });\n\n            categoryDeleteCancel.on('click', function () {\n                categoryDeleteWrapper.removeClass(\"sg-opened\");\n                categoryName.focus();\n                categoryControls.removeClass(\"sg-hidden\");\n            });\n\n            categoryDeleteConfirm.on('click', function () {\n                categoryService.deleteById(id, function (data) {\n                    if (typeof data === 'string') {\n                        module\n                            .notifications\n                            .pushMessage(\"Category Deletion: \" + data);\n                    } else {\n                        categoriesUpdateActions();\n                        module\n                            .notifications\n                            .pushMessage(\"Category Deleted!\");\n                        categoryLine.remove();\n                        categoryControls.removeClass(\"sg-hidden\");\n                    }\n                });\n            });\n\n            //edit workflow\n            function inputKeyboardEvents (event) {\n                if (event.keyCode === 13) {\n                    event.stopPropagation();\n                    categoryEditConfirm.click();\n                } else if (event.keyCode === 27) {\n                    event.stopPropagation();\n                    categoryEditCancel.click();\n                }\n            }\n\n            categoryEdit.on('click', function () {\n                categoryEditWrapper.addClass(\"sg-opened\");\n                categoryName\n                    .removeAttr(\"readonly\")\n                    .focus();\n                categoryControls.addClass(\"sg-hidden\");\n\n                setTimeout(function () {\n                    categoryName.on(\"keydown keyup\", inputKeyboardEvents);\n                }, 250);\n            });\n\n            categoryEditCancel.on('click', function () {\n                categoryEditWrapper.removeClass(\"sg-opened\");\n                categoryName\n                    .attr(\"readonly\", \"\")\n                    .focus();\n                categoryControls.removeClass(\"sg-hidden\");\n                setTimeout(function () {\n                    categoryName.off(\"keydown keyup\", inputKeyboardEvents);\n                }, 250);\n\n                categoryName.val(name);\n            });\n\n            categoryEditConfirm.on('click', function () {\n                categoryService.save({\n                    id: id,\n                    name: categoryName.val()\n                }, function (data) {\n                    if (typeof data === 'string') {\n                        module\n                            .notifications\n                            .pushMessage(\"Category Save: \" + data);\n                        categoryName.val(name);\n                    } else {\n                        categoryEditWrapper.removeClass(\"sg-opened\");\n                        categoryName\n                            .attr(\"readonly\", \"\")\n                            .focus();\n                        categoryControls.removeClass(\"sg-hidden\");\n                        setTimeout(function () {\n                            categoryName.off(\"keydown keyup\", inputKeyboardEvents);\n                        }, 250);\n                        id = data.id;\n                        name = data.name;\n                        categoryName.val(data.name);\n                        categoriesUpdateActions();\n                        module\n                            .notifications\n                            .pushMessage(\"Category Save: Successfully Saved!\");\n                    }\n                });\n            });\n\n            //construction\n            categoryInputWrapper\n                .append(categoryName);\n            categoryControlsInner\n                .append(categoryDelete)\n                .append(categoryEdit)\n                .appendTo(categoryControls);\n            categoryDeleteInnerWrapper\n                .append(categoryDeleteConfirm)\n                .append(categoryDeleteCancel)\n                .appendTo(categoryDeleteWrapper);\n            categoryEditInnerWrapper\n                .append(categoryEditConfirm)\n                .append(categoryEditCancel)\n                .appendTo(categoryEditWrapper);\n\n            categoryLine\n                .append(categoryInputWrapper)\n                .append(categoryControls)\n                .append(categoryDeleteWrapper)\n                .append(categoryEditWrapper);\n\n            if (editMode === true) {\n                setTimeout(function () {\n                    categoryEdit.click();\n                }, 50);\n            }\n\n            return categoryLine;\n        }\n\n        categoriesButton.on(\"click\", function () {\n            categoryService.getCategories(function (categories) {\n                var categoriesList = $('<ul class=\"sg-categories-list\"></ul>'),\n                    categoryAddButton = $('<button class=\"sg-button-add\">Add Category</button>');\n                modalContent = $(\"<div></div>\");\n\n                categoryAddButton.on('click', function () {\n                    categoriesList.append(categoryMarkup('', undefined, true));\n                });\n\n                $.each(categories, function (index, value) {\n                    categoriesList.append(categoryMarkup(value.name, value.id, false));\n                });\n\n                modalContent.append(categoriesList);\n                modalContent.append(categoryAddButton);\n\n                $.openModal({\n                    title: 'Categories',\n                    width: 750,\n                    content: modalContent\n                });\n            });\n        });\n    };\n\n    var deletedSnippetsNav = function () {\n        $('.js-deleted-snippets').on('click', bindNavClick);\n    };\n\n    var styleguideLogoNav = function () {\n        $('.js-styleguide-logo').on('click', bindNavClick);\n    };\n\n    var initSnippetService = function () {\n        snippetService.init(function (data) {\n            if (typeof data === 'string') {\n                isServerOn = false;\n                console.log(data); // server is down\n            } else {\n                isServerOn = true;\n                console.log('EDIT MODE - Server is running'); // server is running\n\n                $('html').addClass('server-on');\n\n                //commented these, these will be improved and enabled after initial release\n                //$('.js-scrape-snipp').on('click', $.proxy(snippetActions.scrapeHandler, null, 'snippets'));\n                $(document).on('click', '.js-scrape-sass', $.proxy(snippetActions.scrapeHandler, null, 'sass'));\n                $('.js-create-snippet').submit({isNew: true}, snippetActions.createEditSnippet);\n                newSnippetControls();\n                categoryControls();\n                deletedSnippetsNav();\n\n                if (data) {\n                    $.openModal({\n                        title: 'Found Duplicates!',\n                        width: 500,\n                        content: '<p>Found duplicates!</p><pre>' + JSON.stringify(data, null, 2) + '</pre>'\n                    });\n                }\n            }\n        });\n    };\n\n    module.notifications = {\n        notificationsContainer: $(\".js-notifications\"),\n        template: '' +\n            '<div class=\"sg-notification-item js-notification-item\">' +\n                '<span class=\"sg-notification-item-text\">{{message}}</span>' +\n            '</div>',\n        pushMessage: function (message) {\n            var currentMessage = $(module.notifications.template.replace('{{message}}', message)),\n                localTimeout;\n\n            function activateTimeout (miliseconds) {\n                localTimeout = setTimeout(function () {\n                    //remove element and events\n                    currentMessage\n                        .remove();\n                    module\n                        .notifications\n                        .notificationsContainer\n                        .off(\"mouseover\", removeTimeout)\n                        .off(\"mouseout\", reactiveTimeout)\n                        .find(\".js-close-notifications\")\n                        .off(\"click\", closeImmediately);\n\n                    //check if it was the last item\n                    if (module.notifications.notificationsContainer.find(\"> .js-notification-item\").length === 0) {\n                        module\n                            .notifications\n                            .notificationsContainer\n                            .removeClass(\"show removing-5 removing-10\")\n                            .addClass(\"quick-opacity\");\n                    }\n                }, miliseconds);\n            }\n\n            //mouse over wrapper - opacity to 1 and all items stay in place\n            function removeTimeout () {\n                module\n                    .notifications\n                    .notificationsContainer\n                    .removeClass(\"removing-5 removing-10\")\n                    .addClass(\"quick-opacity\");\n                clearTimeout(localTimeout);\n            }\n\n            //mouse out - opacity to .85 in 5 seconds for all items\n            function reactiveTimeout () {\n                module\n                    .notifications\n                    .notificationsContainer\n                    .addClass(\"show removing-5\")\n                    .removeClass(\"quick-opacity\");\n                activateTimeout(5000);\n            }\n\n            //every item closes itself, since it is the easiest way to handle all events\n            function closeImmediately () {\n                activateTimeout(1);\n            }\n\n            //add new message to top\n            module\n                .notifications\n                .notificationsContainer\n                .prepend(currentMessage);\n\n            //set wrappers opacity to 1 and go to .85 in 10 seconds\n            setTimeout(function () {\n                module\n                    .notifications\n                    .notificationsContainer\n                    .addClass(\"show removing-10\")\n                    .removeClass(\"quick-opacity\")\n                    //required when there are more than one item in notifications\n                    //remove transitions\n                    .css({\n                        \"transition\": \"0s\",\n                        \"-webkit-transition\": \"0s\",\n                        \"-moz-transition\": \"0s\"\n                    })\n                    //animate opacity to 1\n                    .animate(\n                        {\n                            opacity: 1\n                        },\n                        200,\n                        function () {\n                            $(this).removeAttr(\"style\"); //removes transitions and opacity from inline styles\n                        }\n                    );\n            }, 1);\n\n            activateTimeout(10000); // set 10 seconds until removing item\n\n            //attach events\n            module\n                .notifications\n                .notificationsContainer\n                .on(\"mouseover\", removeTimeout)\n                .on(\"mouseout\", reactiveTimeout)\n                .find(\".js-close-notifications\") //todo optimize selector since it is always there\n                .on(\"click\", closeImmediately);\n        }\n    };\n\n    var bindProjectInformation = function (data) {\n        var $linkElement = $('.js-project-link');\n        var $imgContainer = $('.js-project-logo');\n        var projectName = data.projectName.length ? data.projectName : 'project name';\n        var projectUrl = data.projectUrl.length ? data.projectUrl : '#nolink';\n        var $image = $('<img />');\n\n        $linkElement.text(projectName);\n        $linkElement.attr('href', projectUrl);\n\n        if (data.projectLogo.length) {\n            $image.attr('src', data.projectLogo);\n            $image.attr('alt', projectName);\n\n            $imgContainer.append($image);\n        }\n    };\n\n    module.init = function () {\n        $.getJSON('./config.txt', function (data) {\n            bindProjectInformation(data);\n        });\n\n        editorService.init();\n        bindResolutionActions();\n        buildNavigation($('.js-navigation'), '.js-navigation-list', true);\n        buildNavigation($('.js-home-navigation'), '.js-navigation-list', false);\n        categoryService.init();\n        categoryService.bindCategoriesToForm($('.js-form-select').first());\n        initSnippetService();\n        openDropdown();\n        styleguideLogoNav();\n    };\n\n    module.getCurrentView = function () {\n        return currentView;\n    };\n\n    module.getDefaultResolution = function () {\n        return defaultResolution;\n    };\n\n    return module;\n})(jQuery || {}, editorService, sassService, categoryService, snippetService);\n"}