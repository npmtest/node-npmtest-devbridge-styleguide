{"/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/test.js":"/* istanbul instrument in package npmtest_devbridge_styleguide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/lib.npmtest_devbridge_styleguide.js":"/* istanbul instrument in package npmtest_devbridge_styleguide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_devbridge_styleguide = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_devbridge_styleguide = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-devbridge-styleguide && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_devbridge_styleguide */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_devbridge_styleguide\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_devbridge_styleguide.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_devbridge_styleguide.rollup.js'] =\n            local.assetsDict['/assets.npmtest_devbridge_styleguide.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_devbridge_styleguide.__dirname + '/lib.npmtest_devbridge_styleguide.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/index.js":"var _ = require('lodash');\nvar app = require('./app');\nvar http = require('http');\nvar fs = require('fs');\nvar exports = module.exports = {};\nvar tcpPortUsed = require('tcp-port-used');\nvar colors = require('colors/safe');\n\nexports.startServer = function (options) {\n\tvar defaultOptions = {\n\t\tstyleguidePath: 'styleguide'\n\t};\n\n\toptions = _.assign(defaultOptions, options);\n\n\tvar config = JSON.parse(fs.readFileSync('./' + options.styleguidePath + '/config.txt', 'utf8'));\n\tvar serverInstance;\n\n\treturn tcpPortUsed.check(config.serverPort)\n\t\t.then(function (inUse) {\n\t\t\tif (!inUse) {\n\t\t\t\tapp.set('styleguideConfig', config);\n\t\t\t\tapp.set('port', config.serverPort);\n\t\t\t\tserverInstance = http.createServer(app);\n\t\t\t\tserverInstance.listen(config.serverPort, function () {\n\t\t\t\t\tconsole.log(colors.green('Styleguide server listening on port ' + config.serverPort));\n\t\t\t\t}).on('error', function (error) {\n\t\t\t\t\tif (error.code === 'EADDRINUSE') {\n\t\t\t\t\t\tconsole.error(colors.red('Something went wrong and server could not start'));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.error(colors.red('Port:' + config.serverPort + ' is already in use.'));\n\t\t\t\tconsole.error(colors.red('Please provide another port.'));\n\t\t\t}\n\n\t\t\treturn serverInstance;\n\n\t\t});\n};\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/app.js":"var express = require('express'),\n  bodyParser = require('body-parser'),\n\n  snippets = require('./routes/snippets'),\n  categories = require('./routes/categories'),\n  scraper = require('./routes/scrape'),\n\n  app = express();\n\n//var logger = require('morgan');\n\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n\n//app.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\n\napp.use(function(req, res, next) {\n  if (req.headers.origin) {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Headers', 'X-Requested-With,Content-Type,Authorization');\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,PATCH,POST,DELETE');\n    if (req.method === 'OPTIONS') return res.sendStatus(200);\n  }\n  next();\n});\n\napp.use('/snippets', snippets);\napp.use('/categories', categories);\napp.use('/scrape', scraper);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n  app.use(function(err, req, res) {\n    res.status(err.status || 500);\n    res.json({\n      message: err.message,\n      error: err\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function(err, req, res) {\n  res.status(err.status || 500);\n  res.json({\n    message: err.message,\n    error: {}\n  });\n});\n\n\nmodule.exports = app;\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/snippets.js":"var express = require('express'),\r\n  fs = require('fs'),\r\n  path = require('path'),\r\n  jf = require('jsonfile'),\r\n  helpers = require('./helpers.js'),\r\n  router = express.Router();\r\n\r\nrouter.get('/', function(req, res) {\r\n  var allSnippets = [],\r\n    config = req.app.get('styleguideConfig'),\r\n    snippets,\r\n    dataPath,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length;\r\n\r\n  for (index = 0; index < length; index++) {\r\n    dataPath = path.join(config.database, categories[index].name + config.extension);\r\n\r\n    snippets = jf.readFileSync(dataPath);\r\n    snippets = snippets.map(helpers.mapCategory, index);\r\n    snippets = snippets.filter(helpers.filterOutDeleted);\r\n    allSnippets = allSnippets.concat(snippets);\r\n  }\r\n  res.json(allSnippets);\r\n});\r\n\r\nrouter.get('/duplicates', function(req, res) {\r\n  var allSnippets = [],\r\n    config = req.app.get('styleguideConfig'),\r\n    found = false,\r\n    dataPath,\r\n    snippets,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length;\r\n\r\n  for (index = 0; index < length; index++) {\r\n    dataPath = path.join(config.database, categories[index].name + config.extension);\r\n\r\n    snippets = jf.readFileSync(dataPath);\r\n    snippets = snippets.map(helpers.mapCategory, index);\r\n    snippets = snippets.filter(helpers.filterOutDeleted);\r\n    allSnippets = allSnippets.concat(snippets);\r\n  }\r\n\r\n  allSnippets.sort(helpers.duplicateComparator);\r\n\r\n  for (index = 0, length = allSnippets.length - 1; index < length; index++) {\r\n    if (allSnippets[index].id == allSnippets[index + 1].id) {\r\n      res.json([allSnippets[index], allSnippets[index + 1]]);\r\n      found = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!found) {\r\n    res.json(found);\r\n  }\r\n});\r\n\r\nrouter.get('/category/:id', function(req, res) {\r\n  var catId = Number(req.params.id),\r\n    config = req.app.get('styleguideConfig'),\r\n    dataPath,\r\n    snippets,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length;\r\n\r\n  for (index = 0; index < length; index++) {\r\n    if (categories[index].id == catId) {\r\n      dataPath = path.join(config.database, categories[index].name + config.extension);\r\n    }\r\n  }\r\n\r\n  if (!dataPath) {\r\n    res.json('Category with id: ' + catId + 'not found.');\r\n    return;\r\n  }\r\n\r\n  snippets = jf.readFileSync(dataPath);\r\n  snippets = snippets.filter(helpers.filterOutDeleted);\r\n\r\n  res.json(snippets);\r\n});\r\n\r\n\r\nrouter.get('/:id', function(req, res) {\r\n  var config = req.app.get('styleguideConfig'),\r\n    uniques = jf.readFileSync(config.uniques),\r\n    id = Number(req.params.id),\r\n    snippets,\r\n    dataPath,\r\n    desireableSnippet,\r\n    categories = JSON.parse(fs.readFileSync(config.categories));\r\n\r\n  if (uniques.indexOf(id) === -1) {\r\n    res.json(false);\r\n    return;\r\n  }\r\n\r\n  for (var i = 0, length = categories.length; i < length; i++) {\r\n    dataPath = path.join(config.database, categories[i].name + config.extension);\r\n    snippets = jf.readFileSync(dataPath);\r\n\r\n    desireableSnippet = snippets.filter(helpers.filterOutById, id)[0];\r\n\r\n    if (desireableSnippet) {\r\n      desireableSnippet.category = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  res.json(desireableSnippet);\r\n});\r\n\r\n\r\nrouter.post('/', function(req, res) {\r\n  var config = req.app.get('styleguideConfig'),\r\n    uniques = jf.readFileSync(config.uniques),\r\n    dataPath,\r\n    dataStore,\r\n    id,\r\n    newSnippet,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length;\r\n\r\n  for (index = 0; index < length; index++) {\r\n    if (categories[index].id === Number(req.body.category)) {\r\n      dataPath = path.join(config.database, categories[index].name + config.extension);\r\n    }\r\n  }\r\n\r\n  if (!dataPath) {\r\n    res.json('Category with id: ' + req.body.category + ' not found.');\r\n    return;\r\n  }\r\n\r\n  dataStore = jf.readFileSync(dataPath);\r\n\r\n  function sortNumber(a, b) {\r\n    return a - b;\r\n  }\r\n\r\n  uniques.sort(sortNumber);\r\n\r\n  if (uniques.length) {\r\n    id = uniques[uniques.length - 1] + 1;\r\n  } else {\r\n    id = 1;\r\n  }\r\n\r\n  newSnippet = {\r\n    id: id,\r\n    name: req.body.name,\r\n    code: req.body.code,\r\n    description: req.body.description,\r\n    inlineCss: req.body.inlineCss,\r\n    includeJs: req.body.includeJs,\r\n    isEdited: false,\r\n    isDeleted: false\r\n  };\r\n\r\n  dataStore.push(newSnippet);\r\n  uniques.push(id);\r\n\r\n  jf.writeFileSync(dataPath, dataStore);\r\n  jf.writeFileSync(config.uniques, uniques);\r\n\r\n  newSnippet.category = Number(req.body.category);\r\n  res.json(newSnippet);\r\n});\r\n\r\n\r\nrouter.put('/:id', function(req, res) {\r\n  var config = req.app.get('styleguideConfig'),\r\n    uniques = jf.readFileSync(config.uniques),\r\n    id = Number(req.params.id),\r\n    snippets,\r\n    category,\r\n    dataPath,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length,\r\n    newCategory = Number(req.body.category),\r\n    desireableSnippet,\r\n    modifiedSnippet;\r\n\r\n  if (uniques.indexOf(id) === -1) {\r\n    res.json(false);\r\n    return;\r\n  }\r\n\r\n  for (index = 0; index < length; index++) {\r\n    dataPath = path.join(config.database, categories[index].name + config.extension);\r\n    snippets = jf.readFileSync(dataPath);\r\n\r\n    desireableSnippet = snippets.filter(helpers.filterOutById, id)[0];\r\n\r\n    if (desireableSnippet) {\r\n      category = index;\r\n      break;\r\n    }\r\n  }\r\n\r\n  index = snippets.indexOf(desireableSnippet);\r\n  snippets.splice(index, 1);\r\n\r\n  if (newCategory !== Number(category)) {\r\n    jf.writeFileSync(dataPath, snippets);\r\n\r\n    for (index = 0; index < length; index++) {\r\n      if (categories[index].id == newCategory) {\r\n        dataPath = path.join(config.database, categories[index].name + config.extension);\r\n      }\r\n    }\r\n\r\n    if (!dataPath) {\r\n      res.json('Category with id: ' + newCategory + 'not found.');\r\n      return;\r\n    }\r\n\r\n    snippets = jf.readFileSync(dataPath);\r\n  }\r\n\r\n  modifiedSnippet = {\r\n    id: id,\r\n    name: req.body.name,\r\n    code: req.body.code,\r\n    description: req.body.description,\r\n    inlineCss: req.body.inlineCss,\r\n    includeJs: req.body.includeJs,\r\n    isEdited: true,\r\n    isDeleted: false\r\n  };\r\n\r\n  snippets.push(modifiedSnippet);\r\n  jf.writeFileSync(dataPath, snippets);\r\n\r\n  modifiedSnippet.category = newCategory;\r\n  res.json(modifiedSnippet);\r\n});\r\n\r\n\r\nrouter.delete('/:id', function(req, res) {\r\n  var config = req.app.get('styleguideConfig'),\r\n    uniques = jf.readFileSync(config.uniques),\r\n    id = Number(req.params.id),\r\n    snippets,\r\n    category,\r\n    dataPath,\r\n    index,\r\n    categories = JSON.parse(fs.readFileSync(config.categories)),\r\n    length = categories.length,\r\n    desireableSnippet;\r\n\r\n  if (uniques.indexOf(id) === -1) {\r\n    res.json(false);\r\n    return;\r\n  }\r\n\r\n  for (index = 0; index < length; index++) {\r\n    dataPath = path.join(config.database, categories[index].name + config.extension);\r\n    snippets = jf.readFileSync(dataPath);\r\n\r\n    desireableSnippet = snippets.filter(helpers.filterOutById, id)[0];\r\n\r\n    if (desireableSnippet) {\r\n      category = index;\r\n      break;\r\n    }\r\n  }\r\n\r\n  desireableSnippet.isDeleted = true;\r\n  desireableSnippet.isEdited = true;\r\n\r\n  index = snippets.indexOf(desireableSnippet);\r\n  snippets.splice(index, 1, desireableSnippet);\r\n\r\n  jf.writeFileSync(dataPath, snippets);\r\n  res.json(desireableSnippet);\r\n});\r\n\r\nmodule.exports = router;","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/helpers.js":"var exports = module.exports = {};\r\n\r\nvar isNumeric = function(num) {\r\n\treturn !isNaN(num);\r\n};\r\n\r\nexports.mapCategory = function(obj) {\r\n\tobj.category = this;\r\n\treturn obj;\r\n};\r\n\r\nexports.filterOutDeleted = function(obj) {\r\n\treturn !obj.isDeleted;\r\n};\r\n\r\nexports.duplicateComparator = function(a, b) {\r\n\treturn a.id - b.id;\r\n};\r\n\r\nexports.filterOutById = function(obj) {\r\n\tif (obj.id == this) {\r\n\t\treturn obj;\r\n\t}\r\n};\r\n\r\nexports.convertToWeightObject = function(obj) {\r\n\tif (isNumeric(obj)) {\r\n\t\treturn {\r\n\t\t\tweight: Number(obj),\r\n\t\t\titalic: false\r\n\t\t};\r\n\t}\r\n\r\n\treturn {\r\n\t\tweight: parseInt(obj),\r\n\t\titalic: true\r\n\t};\r\n};\r\n\r\nexports.filterOutNotVars = function(obj) {\r\n\treturn obj.search(/(?=\\$)[\\d\\D]/) === 0;\r\n};","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/categories.js":"var _ = require('lodash'),\n\texpress = require('express'),\n\tfs = require('fs'),\n\tpath = require('path'),\n\tjf = require('jsonfile'),\n\trouter = express.Router();\n\nrouter.get('/', function(req, res) {\n\tvar config = req.app.get('styleguideConfig'),\n\t\tcategories = JSON.parse(fs.readFileSync(config.categories, 'utf8'));\n\n\tres.json(categories);\n});\n\nrouter.post('/', function (req, res) {\n\tvar config = req.app.get('styleguideConfig'),\n\t\tcategories = JSON.parse(fs.readFileSync(config.categories, 'utf8')),\n\t\tuniqueIds = _.map(categories, 'id'),\n\t\tnewCategory = {},\n\t\tid = 1;\n\n\tuniqueIds.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\tif (uniqueIds.length) {\n\t\tid = uniqueIds[uniqueIds.length - 1 ] + 1;\n\t}\n\n\tnewCategory = {\n\t\tid: id,\n\t\tname: req.body.name\n\t};\n\n    _checkForDupes(categories, newCategory);\n\n\tcategories.push(newCategory);\n\n\tjf.writeFileSync(config.categories, categories);\n\tjf.writeFileSync(path.join(config.database, newCategory.name + config.extension), []);\n\n\tres.json(newCategory);\n});\n\nrouter.put('/:id', function(req, res) {\n\tvar config = req.app.get('styleguideConfig'),\n\t\tcategories = JSON.parse(fs.readFileSync(config.categories, 'utf8')),\n\t\tuniqueIds = _.map(categories, 'id'),\n\t\tid = Number(req.params.id),\n\t\tcategoryIndex = uniqueIds.indexOf(id),\n\t\tcategory = categories[categoryIndex],\n\t\tmodifiedCategory,\n\t\toldCategoryPath = path.join(config.database, category.name + config.extension),\n\t\tnewCategoryPath;\n\n\tif (categoryIndex === -1) {\n\t\tres.json(false);\n\t\treturn;\n\t}\n\n\tmodifiedCategory = {\n\t\tid: id,\n\t\tname: req.body.name\n\t};\n\n    _checkForDupes(categories, modifiedCategory);\n\n\tnewCategoryPath = path.join(config.database, modifiedCategory.name + config.extension);\n\n\tcategories.splice(categoryIndex, 1, modifiedCategory);\n\tjf.writeFileSync(config.categories, categories);\n\n\tfs.renameSync(oldCategoryPath, newCategoryPath);\n\n\tres.json(modifiedCategory);\n});\n\nrouter.delete('/:id', function(req, res) {\n\tvar config = req.app.get('styleguideConfig'),\n\t\tcategories = JSON.parse(fs.readFileSync(config.categories, 'utf8')),\n\t\tuniqueIds = _.map(categories, 'id'),\n\t\tid = Number(req.params.id)\n\t\tcategoryIndex = uniqueIds.indexOf(id),\n\t\tcategory = categories[categoryIndex];\n\n\tif (categoryIndex === -1) {\n\t\tres.json(false);\n\t\treturn;\n\t}\n\n    var categoryToDeletePath = path.join(config.database, category.name + config.extension);\n\n    fs.unlinkSync(categoryToDeletePath);\n\n\tcategories.splice(categoryIndex, 1);\n\n\tjf.writeFileSync(config.categories, categories);\n\tres.json(category);\n});\n\nfunction _checkForDupes(categories, category) {\n    var nameLower = _.toLower(category.name);\n\n    var containsDupe = _.some(categories, function (cat) { return _.toLower(cat.name) === nameLower});\n\n    if (containsDupe) {\n        throw new Error('Category with same name already exists!');\n    }\n};\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/scrape.js":"var express = require('express'),\n  jf = require('jsonfile'),\n  fs = require('fs'),\n  async = require('async'),\n  sassScraper = require('./sassScraper.js'),\n  snippetScraper = require('./snippetScraper.js'),\n  _ = require('lodash'),\n\n  router = express.Router();\n\nrouter.get('/snippets', function(req, res) {\n  var config = req.app.get('styleguideConfig');\n\n  var pushAsyncTask = function(snippets, category, uniques, config) {\n    return function(callback) {\n      snippetScraper.writeOutSnippets(snippets, category, uniques, function(changedSnipps, newSnipps) {\n        callback(null, {\n          changedSnipps: changedSnipps,\n          newSnipps: newSnipps\n        });\n      });\n    };\n  };\n\n  snippetScraper.requestPages(config.scrapeUrls, function(responses) {\n    var filteredHTml = [],\n      filters,\n      htmlBody,\n      snippets = {},\n      newSnippet,\n      category,\n      url,\n      response,\n      index,\n      allSnippets = [],\n      length,\n      asyncTasks = [],\n      report = {},\n      uniques = jf.readFileSync(config.uniques, {\n        throws: false\n      }) || [];\n\n    for (url in responses) {\n      if (responses.hasOwnProperty(url)) {\n        response = responses[url];\n\n        if (response.error) {\n          console.log(\"Error\", url, response.error);\n          return;\n        }\n\n        if (response.body) {\n          htmlBody = response.body;\n          // matches all the snippet body (<!-- snippet:start 1:1 include-js --><div id=\"example\"></div><!-- snippet:end -->)\n          filters = htmlBody.match(/<!-- snippet:start [\\d\\D]*?snippet:end -->/gi);\n          filteredHTml = filteredHTml.concat(filters);\n        }\n      }\n    }\n\n    report.totalFound = filteredHTml.length;\n    report.changedSnippets = [];\n    report.duplicateIds = [];\n    report.foundNew = 0;\n\n    for (index = 0, length = filteredHTml.length; index < length; index++) {\n      if (filteredHTml[index]) {\n        newSnippet = snippetScraper.buildSnippetFromHtml(filteredHTml[index], snippets);\n\n        allSnippets.push(newSnippet.id);\n\n        if (!newSnippet) {\n          res.status(500).send('Something went wrong when building snippet from HTML!');\n          return;\n        }\n      }\n    }\n\n    allSnippets.sort();\n\n    for (index = 0, length = allSnippets.length; index < length; index++) {\n      if (allSnippets[index + 1] === allSnippets[index]) {\n        report.duplicateIds.push(allSnippets[index]);\n      }\n    }\n\n    for (category in snippets) {\n      if (snippets.hasOwnProperty(category)) {\n        asyncTasks.push(pushAsyncTask(snippets, category, uniques, config));\n      }\n    }\n\n    async.series(asyncTasks, function(err, reports) {\n      var index,\n        len = reports.length;\n\n      for (index = 0; index < len; index++) {\n        report.changedSnippets = report.changedSnippets.concat(reports[index].changedSnipps);\n        report.foundNew += reports[index].newSnipps;\n      }\n\n      jf.writeFileSync(config.uniques, uniques);\n\n      res.json(report);\n    });\n  });\n\n});\n\nrouter.get('/sass', function(req, res) {\n  var config = req.app.get('styleguideConfig');\n\n  var results = [],\n    result = {\n      name: 'theme',\n      colors: {},\n      typography: []\n    },\n    index,\n    sassPaths = config.cssVariables,\n    maxSassIterations = config.maxSassIterations,\n    length = sassPaths.length,\n    report = [],\n    currentResult;\n\n  for (index = 0; index < length; index++) {\n    report.push(sassScraper.scrapeTheme(index, results, sassPaths, maxSassIterations, config));\n  }\n\n  for (index = 0; index < length; index++) {\n    currentResult = results[index];\n\n    if (currentResult.colors) {\n      result.colors = _.assign(result.colors, currentResult.colors);\n    }\n\n    if (currentResult.typography) {\n      result.typography = result.typography.concat(currentResult.typography);\n    }\n\n  }\n\n  jf.writeFileSync(config.sassData, [result]);\n\n  res.json(report);\n});\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/sassScraper.js":"var helpers = require('./helpers.js'),\n  fs = require('fs'),\n  jf = require('jsonfile'),\n  path = require('path'),\n  exports = module.exports = {};\n\nvar pruneArrayAndObject = function () {\n  delete Array.prototype.equals;\n  delete Object.prototype.equals;\n};\n\nvar extendArrayAndObject = function() {\n  Array.prototype.equals = function(array) {\n    if (!array)\n      return false;\n\n    if (this.length !== array.length)\n      return false;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (this[i] instanceof Array && array[i] instanceof Array) {\n        if (!this[i].equals(array[i]))\n          return false;\n      } else if (this[i] instanceof Object && array[i] instanceof Object) {\n        if (!this[i].equals(array[i]))\n          return false;\n      } else if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  Object.prototype.equals = function(object2) {\n    var propName;\n    for (propName in this) {\n      if (this.hasOwnProperty(propName) !== object2.hasOwnProperty(propName)) {\n        return false;\n      } else if (typeof this[propName] !== typeof object2[propName]) {\n        return false;\n      }\n    }\n\n    for (propName in object2) {\n      if (this.hasOwnProperty(propName) !== object2.hasOwnProperty(propName)) {\n        return false;\n      } else if (typeof this[propName] !== typeof object2[propName]) {\n        return false;\n      }\n\n      if (!this.hasOwnProperty(propName))\n        continue;\n\n      if (this[propName] instanceof Array && object2[propName] instanceof Array) {\n        if (!this[propName].equals(object2[propName]))\n          return false;\n      } else if (this[propName] instanceof Object && object2[propName] instanceof Object) {\n        if (!this[propName].equals(object2[propName]))\n          return false;\n      } else if (this[propName] !== object2[propName]) {\n        return false;\n      }\n    }\n    return true;\n  };\n};\n\nvar parseTypoghraphy = function(theme, variables, cssType) {\n  var weights,\n    typography,\n    type,\n    rawTypoArray,\n    fontValue,\n    variableName,\n    index,\n    length;\n\n  //replace less variable declaration symbol @ to scss symbol $\n  variables = variables.replace(/\\n@/gi, '\\n$');\n  //matches everything between //-- typo:start --// and //-- typo:end --/ including these markers\n  typography = variables.match(/\\/\\/-- typo:start[\\d\\D]*?typo:end --\\/\\//gi);\n  rawTypoArray = typography[0].split('\\n');\n\n  //removing markers\n  rawTypoArray.shift();\n  rawTypoArray.pop();\n\n  rawTypoArray = rawTypoArray.filter(helpers.filterOutNotVars);\n\n  //Constructing types array\n  typography = [];\n\n  //prepare array structure https://regex101.com/\n  for (index = 0, length = rawTypoArray.length; index < length; index++) {\n    if (cssType === 'scss' || cssType === 'less') {\n      //matches from $ to :, including $. To take variable name.\n      variableName = rawTypoArray[index].match(/\\$[\\d\\D]*?(?=:)/gi)[0];\n      //matches from : to ;, including :. To take variable value.\n      fontValue = rawTypoArray[index].match(/(?=:)[\\d\\D]*?(?=;)/)[0];\n    }\n\n    if (cssType === 'styl') {\n      //matches from $ to =, including $. To take variable name.\n      variableName = rawTypoArray[index].match(/\\$[\\d\\D]*?(?==)/gi)[0];\n      //matches from = to /, including =. To take variable value.\n      fontValue = rawTypoArray[index].match(/(?==)[\\d\\D]*?(?=\\/)/)[0];\n    }\n\n    if (cssType === 'sass') {\n      //matches from $ to :, including $. To take variable name.\n      variableName = rawTypoArray[index].match(/\\$[\\d\\D]*?(?=:)/gi)[0];\n      //matches from : to end of line, including :. To take variable value.\n      fontValue = rawTypoArray[index].match(/(?=:)[\\d\\D]*?(?=\\/)/)[0];\n    }\n\n    //matches everything in between (), including (. To take font weights.\n    weights = rawTypoArray[index].match(/(?=\\/)[\\d\\D]+/gi);\n\n    fontValue = fontValue.substring(1, fontValue.length).trim();\n\n    if (weights) {\n      weights = weights[0];\n      weights = weights.replace(/\\//g, '').replace(/ /g, '').split(',');\n      weights = weights.map(helpers.convertToWeightObject);\n    } else {\n      console.log('Weights were not found for ' + variableName + '.');\n    }\n\n    type = {\n      variable: variableName,\n      value: fontValue,\n      weights: weights\n    };\n\n    typography.push(type);\n  }\n\n  theme.typography = typography;\n};\n\nvar parseColors = function(theme, variables, cssType, maxSassIterations) {\n  var rawColArray,\n    unassignedColors = [],\n    assignedColors = {},\n    iterations = 0,\n    index,\n    length,\n    variableName,\n    hexOrVarValue,\n    color;\n\n  //replace less variable declaration symbol @ to scss symbol $\n  variables = variables.replace(/\\n@/gi, '\\n$');\n  //matches everything between //-- colors:start --// and //-- colors:end --/ including these markers\n  rawColArray = variables.match(/\\/\\/-- colors:start[\\d\\D]*?colors:end --\\/\\//gi);\n\n  for (index = 0, length = rawColArray.length; index < length; index++) {\n    rawColArray[index] = rawColArray[index].split('\\n');\n\n    //remove dom markers\n    rawColArray[index].shift();\n    rawColArray[index].pop();\n\n    unassignedColors = unassignedColors.concat(rawColArray[index]);\n  }\n\n  unassignedColors = unassignedColors.filter(helpers.filterOutNotVars);\n\n  //prepare array structure https://regex101.com/\n  for (index = 0, length = unassignedColors.length; index < length; index++) {\n    if(cssType === 'less' || cssType === 'scss') {\n      //matches from $ to :, including $. To take variable name.\n      variableName = unassignedColors[index].match(/\\$[\\d\\D]*?(?=:)/gi)[0];\n      //matches from : to ;, including :. To take variable value.\n      hexOrVarValue = unassignedColors[index].match(/:[\\d\\D]*?(?=;)/gi)[0];\n    }\n\n    if (cssType === 'styl') {\n      //matches from $ to =, including $. To take variable name.\n      variableName = unassignedColors[index].match(/\\$[\\d\\D]*?(?==)/gi)[0];\n      //matches from = to end of line, including :. To take variable value.\n      hexOrVarValue = unassignedColors[index].match(/=[\\d\\D]+/gi)[0];\n    }\n\n    if (cssType === 'sass') {\n      //matches from $ to :, including $. To take variable name.\n      variableName = unassignedColors[index].match(/\\$[\\d\\D]*?(?=:)/gi)[0];\n      //matches from : to end of line, including :. To take variable value.\n      hexOrVarValue = unassignedColors[index].match(/:[\\d\\D]+/gi)[0];\n    }\n\n    hexOrVarValue = hexOrVarValue.substring(1, hexOrVarValue.length).trim();\n\n    unassignedColors[index] = {\n      variable: variableName,\n      value: hexOrVarValue\n    };\n  }\n\n  while (iterations < maxSassIterations && unassignedColors.length) {\n    for (index = 0; index < unassignedColors.length; index++) {\n      if (unassignedColors[index].value.indexOf('$') !== 0) {\n        if (assignedColors[unassignedColors[index].value]) {\n          assignedColors[unassignedColors[index].value].push(unassignedColors[index].variable);\n        } else {\n          assignedColors[unassignedColors[index].value] = [unassignedColors[index].variable];\n        }\n\n        unassignedColors.splice(index, 1);\n      } else {\n        for (color in assignedColors) {\n          if (assignedColors[color].indexOf(unassignedColors[index].value) !== -1) {\n            assignedColors[color].push(unassignedColors[index].variable);\n            unassignedColors.splice(index, 1);\n            break;\n          }\n        }\n      }\n    }\n    iterations++;\n  }\n\n  if (iterations === maxSassIterations) {\n    console.log('Iterations reached max size, your variables json file could be inaccurate!\\nThis means, that variable r-value is trying to show to non existing variable!');\n  }\n\n  theme.colors = assignedColors;\n};\n\nvar compareForReport = function(theme, report, config) {\n  var oldData = jf.readFileSync(config.sassData, {throws: false}) || [],\n    len = oldData.length,\n    index;\n\n  for (index = 0; index < len; index++) {\n    if (oldData[index].name === theme.name) {\n      oldData = oldData[index];\n      break;\n    }\n  }\n\n  if (!oldData.hasOwnProperty('colors')) {\n    oldData = {\n      colors: {},\n      typography: []\n    };\n  }\n\n  report.themeName = theme.name;\n  report.uniqueColVals = theme.colors ? Object.keys(theme.colors).length : 0;\n  report.diffOfColVals = report.uniqueColVals - Object.keys(oldData.colors).length;\n\n  if (theme.typography && !theme.typography.equals(oldData.typography)) {\n    report.oldTypo = oldData.typography;\n    report.newTypo = theme.typography;\n  }\n};\n\nexports.scrapeTheme = function(themeIndex, result, sassPaths, maxSassIterations, config) {\n  var variables,\n    theme = {},\n    report = {},\n    fileType = path.extname(sassPaths[0]),\n    cssType = fileType.substr(1, fileType.length - 1);\n\n    variables = fs.readFileSync(sassPaths[themeIndex], {\n    encoding: 'utf-8'\n  });\n  theme.name = sassPaths[themeIndex];\n\n  //matches everything between //-- typo:start --// and //-- typo:end --/ including these markers\n  if (variables.search(/\\/\\/-- typo:start[\\d\\D]*?typo:end --\\/\\//gi) !== -1) {\n    parseTypoghraphy(theme, variables, cssType);\n  } else {\n    console.log('Typography markers not found in ' + theme.name + '.');\n  }\n\n  //matches everything between //-- colors:start --// and //-- colors:end --/ including these markers\n  if (variables.search(/\\/\\/-- colors:start[\\d\\D]*?colors:end --\\/\\//gi) !== -1) {\n    parseColors(theme, variables, cssType, maxSassIterations);\n  } else {\n    console.log('Color markers not found in ' + theme.name + '.');\n  }\n\n  extendArrayAndObject();\n\n  compareForReport(theme, report, config);\n\n  pruneArrayAndObject();\n\n  result.push(theme);\n\n  return report;\n};\n","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/routes/snippetScraper.js":"var request = require('request'),\r\n  path = require('path'),\r\n  jf = require('jsonfile'),\r\n  async = require('async'),\r\n  helpers = require('./helpers.js'),\r\n  fs = require('fs'),\r\n\r\n  exports = module.exports = {};\r\n\r\nvar findSnippet = function(snippetId, callback, config) {\r\n  var dataPath,\r\n    snippets,\r\n    desireableSnippet,\r\n    index,\r\n    length = config.categories.length;\r\n  for (index = 0; index < length; index++) {\r\n    dataPath = path.join(config.database, config.categories[index].name + config.extension);\r\n    snippets = jf.readFileSync(dataPath, {\r\n      throws: false\r\n    }) || [];\r\n    desireableSnippet = snippets.filter(helpers.filterOutById, snippetId)[0];\r\n    if (desireableSnippet) {\r\n      callback({\r\n        snippet: desireableSnippet,\r\n        category: index\r\n      });\r\n      break;\r\n    }\r\n  }\r\n};\r\n\r\nexports.requestPages = function(urls, callback) {\r\n  var results = {},\r\n    t = urls.length,\r\n    c = 0,\r\n    handler = function(error, response, body) {\r\n      var url = response.request.uri.href;\r\n      results[url] = {\r\n        error: error,\r\n        response: response,\r\n        body: body\r\n      };\r\n      if (++c === urls.length) {\r\n        callback(results);\r\n      }\r\n    };\r\n\r\n  while (t--) {\r\n    request(urls[t], handler);\r\n  }\r\n};\r\n\r\nexports.buildSnippetFromHtml = function(filteredHTml, snippets) {\r\n  //matches <!-- snippet:start 5:6 --> in string. only to take dom marker.\r\n  var domMarker = filteredHTml.match(/<!-- snippet:start [\\d\\D]*? -->/gi)[0],\r\n    //matches if there is include-js in domMarker\r\n    includeJs = domMarker.match(/include-js/i),\r\n    //matches all numbers, that are in domMarker (first will be snippet id, second if exists - category id)\r\n    extractedIds = domMarker.match(/[\\d]+/g),\r\n    //matches from first > to <!, including >. Used to trim off dom markers from html.\r\n    code = filteredHTml.match(/(?=>)[\\d\\D]*?(?=<!)/gi)[0],\r\n    snippetId,\r\n    categoryId,\r\n    newSnippet;\r\n\r\n  code = code.slice(1);\r\n  if (extractedIds) {\r\n    snippetId = Number(extractedIds[0]);\r\n    categoryId = extractedIds[1] ? Number(extractedIds[1]) : 0;\r\n  }\r\n\r\n  if (!snippetId) {\r\n    console.log('Snippet ID is not defined! In: ' + filteredHTml);\r\n    return false;\r\n  }\r\n\r\n  newSnippet = {\r\n    id: snippetId,\r\n    name: '',\r\n    code: code.trim(),\r\n    description: '',\r\n    inlineCss: '#snippet { \\n  \\n}',\r\n    includeJs: includeJs ? true : false,\r\n    isEdited: false,\r\n    isDeleted: false\r\n  };\r\n\r\n  snippets[categoryId] = snippets[categoryId] ? snippets[categoryId].concat(newSnippet) : [newSnippet];\r\n  return newSnippet;\r\n};\r\n\r\nexports.writeOutSnippets = function(snippets, category, uniques, callback, config) {\r\n  var dataPath,\r\n    snippet,\r\n    dataStore,\r\n    index,\r\n    nestedIndex,\r\n    nestedLen,\r\n    oldCategoryPath,\r\n    oldCatSnippets,\r\n    foundSnippetCallback,\r\n    asyncTasks = [],\r\n    changedSnippets = [],\r\n    newSnippsFound = 0,\r\n    length = config.categories.length;\r\n\r\n  for (index = 0; index < length; index++) {\r\n    if (config.categories[index].id === Number(category)) {\r\n      dataPath = path.join(config.database, config.categories[index].name + config.extension);\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!dataPath) {\r\n    console.log('Category with id: ' + category + ' not found.');\r\n    return false;\r\n  }\r\n\r\n  dataStore = jf.readFileSync(dataPath, {\r\n    throws: false\r\n  }) || [];\r\n\r\n  snippet = snippets[category];\r\n\r\n  foundSnippetCallback = function(snippetAndCategory, changedSnippets, snippetToWriteOut, cb) {\r\n    if (!snippetAndCategory.snippet.isEdited) {\r\n      if (snippetAndCategory.category == category) {\r\n        for (nestedIndex = 0, nestedLen = dataStore.length; nestedIndex < nestedLen; nestedIndex++) {\r\n          if (dataStore[nestedIndex].id == snippetAndCategory.snippet.id) {\r\n            break;\r\n          }\r\n        }\r\n        dataStore.splice(nestedIndex, 1);\r\n        dataStore.push(snippetToWriteOut);\r\n        if (snippetAndCategory.snippet.code.localeCompare(snippetToWriteOut.code) !== 0) {\r\n          changedSnippets.push(snippetToWriteOut.id);\r\n        }\r\n      } else {\r\n        for (nestedIndex = 0, nestedLen = config.categories.length; nestedIndex < nestedLen; nestedIndex++) {\r\n          if (config.categories[nestedIndex].id == snippetAndCategory.category) {\r\n            oldCategoryPath = path.join(config.database, config.categories[nestedIndex].name + config.extension);\r\n            break;\r\n          }\r\n        }\r\n\r\n        oldCatSnippets = jf.readFileSync(oldCategoryPath, {\r\n          throws: false\r\n        }) || [];\r\n\r\n        for (nestedIndex = 0, nestedLen = oldCatSnippets.length; nestedIndex < nestedLen; nestedIndex++) {\r\n          if (oldCatSnippets[nestedIndex].id == snippetAndCategory.snippet.id) {\r\n            break;\r\n          }\r\n        }\r\n        oldCatSnippets.splice(nestedIndex, 1);\r\n        dataStore.push(snippetToWriteOut);\r\n        changedSnippets.push(snippetToWriteOut.id);\r\n\r\n        jf.writeFileSync(oldCategoryPath, oldCatSnippets);\r\n      }\r\n      cb();\r\n    } else {\r\n      console.log('Snippet was edited from UI. Snippet ID: ' + snippetToWriteOut.id);\r\n      cb();\r\n    }\r\n  };\r\n\r\n  var createFuncContext = function(snippetToSearch) {\r\n    return function(cb) {\r\n      findSnippet(snippetToSearch.id, function(snippetAndCategory) {\r\n        foundSnippetCallback(snippetAndCategory, changedSnippets, snippetToSearch, cb);\r\n      }, config);\r\n    };\r\n  };\r\n\r\n  for (index = 0, length = snippet.length; index < length; index++) {\r\n    if (uniques.indexOf(snippet[index].id) === -1) {\r\n      uniques.push(snippet[index].id);\r\n      dataStore.push(snippet[index]);\r\n      newSnippsFound++;\r\n    } else {\r\n      asyncTasks.push(createFuncContext(snippet[index]));\r\n    }\r\n  }\r\n\r\n  async.parallel(asyncTasks, function(err, stuff) {\r\n    callback(changedSnippets, newSnippsFound);\r\n    jf.writeFileSync(dataPath, dataStore);\r\n  });\r\n};","/home/travis/build/npmtest/node-npmtest-devbridge-styleguide/node_modules/devbridge-styleguide/gulpfile.js":"var gulp = require('gulp');\nvar sass = require('gulp-sass');\nvar sassvg = require('gulp-sassvg');\nvar autoprefixer = require('gulp-autoprefixer');\n\ngulp.task('sass', function () {\n    return gulp.src('./templates/scss/main.scss')\n        .pipe(sass({\n            outputStyle: 'compressed',\n            includePaths: require('node-bourbon').includePaths\n        }).on('error', sass.logError))\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions']\n        }))\n        .pipe(gulp.dest('./templates/content'))\n        .pipe(gulp.dest('./_demo/styleguide/content'));\n});\n\ngulp.task('sassvg', function () {\n    return gulp.src('./templates/content/icons/**/*.svg')\n        .pipe(sassvg({\n            outputFolder: './templates/scss/icons'\n        }));\n});\n\ngulp.task('icons', ['sassvg'], function(callback) {\n    return gulp.start('sass');\n});\n\ngulp.task('watch', function () {\n    gulp.watch(['./templates/scss/**/*.scss', '!./templates/scss/icons/*.scss'], ['sass']);\n});\n"}